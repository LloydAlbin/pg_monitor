-- USE SELECT * FROM tools.generate_pgtap(); TO GENERATE THIS FILE
\connect pgmonitor_db

-- Setup Test Variables
\set test_name 'permissions'
\set test_user 'grafana'
\set test_production_database 'pgmonitor_db'
\set plan 689

-- Install pgTAP, show diagnostics, and start common tests
--\ir ../common/diagnostic.sql
\i common/diagnostics.pg

SELECT diag('=================================');
SELECT diag('Role Tests');
SELECT has_role('grafana'::name);
SELECT diag('=================================');
SELECT diag('Schema Tests');
SELECT has_schema('logs');
SELECT schema_owner_is('logs', 'grafana'::NAME);
SELECT has_schema('stats');
SELECT schema_owner_is('stats', 'grafana'::NAME);
SELECT has_schema('tools');
SELECT schema_owner_is('tools', 'grafana'::NAME);
SELECT diag('=================================');
SELECT diag('Table Tests');
SELECT has_table ( 'logs', 'archive_failure_log'::NAME );
SELECT table_owner_is ( 'logs', 'archive_failure_log'::NAME, 'grafana'::NAME);
SELECT has_column( 'logs', 'archive_failure_log'::NAME, 'cluster_name'::NAME, 'Column logs.archive_failure_log.cluster_name should exist' );
SELECT col_type_is( 'logs', 'archive_failure_log'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'logs', 'archive_failure_log'::NAME, 'log_time'::NAME, 'Column logs.archive_failure_log.log_time should exist' );
SELECT col_type_is( 'logs', 'archive_failure_log'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'logs', 'archive_failure_log'::NAME, 'process_id'::NAME, 'Column logs.archive_failure_log.process_id should exist' );
SELECT col_type_is( 'logs', 'archive_failure_log'::NAME, 'process_id'::NAME, 'integer' );
SELECT has_column( 'logs', 'archive_failure_log'::NAME, 'message'::NAME, 'Column logs.archive_failure_log.message should exist' );
SELECT col_type_is( 'logs', 'archive_failure_log'::NAME, 'message'::NAME, 'text' );
SELECT has_column( 'logs', 'archive_failure_log'::NAME, 'detail'::NAME, 'Column logs.archive_failure_log.detail should exist' );
SELECT col_type_is( 'logs', 'archive_failure_log'::NAME, 'detail'::NAME, 'text' );
SELECT has_table ( 'logs', 'autoanalyze_logs'::NAME );
SELECT table_owner_is ( 'logs', 'autoanalyze_logs'::NAME, 'grafana'::NAME);
SELECT has_column( 'logs', 'autoanalyze_logs'::NAME, 'log_time'::NAME, 'Column logs.autoanalyze_logs.log_time should exist' );
SELECT col_type_is( 'logs', 'autoanalyze_logs'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'logs', 'autoanalyze_logs'::NAME, 'cluster_name'::NAME, 'Column logs.autoanalyze_logs.cluster_name should exist' );
SELECT col_type_is( 'logs', 'autoanalyze_logs'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'logs', 'autoanalyze_logs'::NAME, 'database_name'::NAME, 'Column logs.autoanalyze_logs.database_name should exist' );
SELECT col_type_is( 'logs', 'autoanalyze_logs'::NAME, 'database_name'::NAME, 'text' );
SELECT has_column( 'logs', 'autoanalyze_logs'::NAME, 'schema_name'::NAME, 'Column logs.autoanalyze_logs.schema_name should exist' );
SELECT col_type_is( 'logs', 'autoanalyze_logs'::NAME, 'schema_name'::NAME, 'text' );
SELECT has_column( 'logs', 'autoanalyze_logs'::NAME, 'table_name'::NAME, 'Column logs.autoanalyze_logs.table_name should exist' );
SELECT col_type_is( 'logs', 'autoanalyze_logs'::NAME, 'table_name'::NAME, 'text' );
SELECT has_column( 'logs', 'autoanalyze_logs'::NAME, 'cpu_system'::NAME, 'Column logs.autoanalyze_logs.cpu_system should exist' );
SELECT col_type_is( 'logs', 'autoanalyze_logs'::NAME, 'cpu_system'::NAME, 'numeric' );
SELECT has_column( 'logs', 'autoanalyze_logs'::NAME, 'cpu_user'::NAME, 'Column logs.autoanalyze_logs.cpu_user should exist' );
SELECT col_type_is( 'logs', 'autoanalyze_logs'::NAME, 'cpu_user'::NAME, 'numeric' );
SELECT has_column( 'logs', 'autoanalyze_logs'::NAME, 'elasped_seconds'::NAME, 'Column logs.autoanalyze_logs.elasped_seconds should exist' );
SELECT col_type_is( 'logs', 'autoanalyze_logs'::NAME, 'elasped_seconds'::NAME, 'numeric' );
SELECT has_table ( 'logs', 'autovacuum_logs'::NAME );
SELECT table_owner_is ( 'logs', 'autovacuum_logs'::NAME, 'grafana'::NAME);
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'log_time'::NAME, 'Column logs.autovacuum_logs.log_time should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'log_time'::NAME, 'timestamp(3) with time zone' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'cluster_name'::NAME, 'Column logs.autovacuum_logs.cluster_name should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'database_name'::NAME, 'Column logs.autovacuum_logs.database_name should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'database_name'::NAME, 'text' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'schema_name'::NAME, 'Column logs.autovacuum_logs.schema_name should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'schema_name'::NAME, 'text' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'table_name'::NAME, 'Column logs.autovacuum_logs.table_name should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'table_name'::NAME, 'text' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'index_scans'::NAME, 'Column logs.autovacuum_logs.index_scans should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'index_scans'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'pages_removed'::NAME, 'Column logs.autovacuum_logs.pages_removed should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'pages_removed'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'removed_size'::NAME, 'Column logs.autovacuum_logs.removed_size should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'removed_size'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'pages_remain'::NAME, 'Column logs.autovacuum_logs.pages_remain should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'pages_remain'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'pages_remain_size'::NAME, 'Column logs.autovacuum_logs.pages_remain_size should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'pages_remain_size'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'skipped_due_to_pins'::NAME, 'Column logs.autovacuum_logs.skipped_due_to_pins should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'skipped_due_to_pins'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'skipped_frozen'::NAME, 'Column logs.autovacuum_logs.skipped_frozen should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'skipped_frozen'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'tuples_removed'::NAME, 'Column logs.autovacuum_logs.tuples_removed should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'tuples_removed'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'tuples_remain'::NAME, 'Column logs.autovacuum_logs.tuples_remain should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'tuples_remain'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'tuples_dead'::NAME, 'Column logs.autovacuum_logs.tuples_dead should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'tuples_dead'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'oldest_xmin'::NAME, 'Column logs.autovacuum_logs.oldest_xmin should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'oldest_xmin'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'buffer_hits'::NAME, 'Column logs.autovacuum_logs.buffer_hits should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'buffer_hits'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'buffer_misses'::NAME, 'Column logs.autovacuum_logs.buffer_misses should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'buffer_misses'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'buffer_dirtied'::NAME, 'Column logs.autovacuum_logs.buffer_dirtied should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'buffer_dirtied'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'buffer_dirtied_size'::NAME, 'Column logs.autovacuum_logs.buffer_dirtied_size should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'buffer_dirtied_size'::NAME, 'bigint' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'avg_read_rate'::NAME, 'Column logs.autovacuum_logs.avg_read_rate should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'avg_read_rate'::NAME, 'numeric' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'avg_write_rate'::NAME, 'Column logs.autovacuum_logs.avg_write_rate should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'avg_write_rate'::NAME, 'numeric' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'cpu_system'::NAME, 'Column logs.autovacuum_logs.cpu_system should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'cpu_system'::NAME, 'numeric' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'cpu_user'::NAME, 'Column logs.autovacuum_logs.cpu_user should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'cpu_user'::NAME, 'numeric' );
SELECT has_column( 'logs', 'autovacuum_logs'::NAME, 'elasped_seconds'::NAME, 'Column logs.autovacuum_logs.elasped_seconds should exist' );
SELECT col_type_is( 'logs', 'autovacuum_logs'::NAME, 'elasped_seconds'::NAME, 'numeric' );
SELECT has_table ( 'logs', 'checkpoint_logs'::NAME );
SELECT table_owner_is ( 'logs', 'checkpoint_logs'::NAME, 'grafana'::NAME);
SELECT has_column( 'logs', 'checkpoint_logs'::NAME, 'log_time'::NAME, 'Column logs.checkpoint_logs.log_time should exist' );
SELECT col_type_is( 'logs', 'checkpoint_logs'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'logs', 'checkpoint_logs'::NAME, 'cluster_name'::NAME, 'Column logs.checkpoint_logs.cluster_name should exist' );
SELECT col_type_is( 'logs', 'checkpoint_logs'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'logs', 'checkpoint_logs'::NAME, 'wbuffer'::NAME, 'Column logs.checkpoint_logs.wbuffer should exist' );
SELECT col_type_is( 'logs', 'checkpoint_logs'::NAME, 'wbuffer'::NAME, 'integer' );
SELECT has_column( 'logs', 'checkpoint_logs'::NAME, 'files_added'::NAME, 'Column logs.checkpoint_logs.files_added should exist' );
SELECT col_type_is( 'logs', 'checkpoint_logs'::NAME, 'files_added'::NAME, 'integer' );
SELECT has_column( 'logs', 'checkpoint_logs'::NAME, 'file_removed'::NAME, 'Column logs.checkpoint_logs.file_removed should exist' );
SELECT col_type_is( 'logs', 'checkpoint_logs'::NAME, 'file_removed'::NAME, 'integer' );
SELECT has_column( 'logs', 'checkpoint_logs'::NAME, 'file_recycled'::NAME, 'Column logs.checkpoint_logs.file_recycled should exist' );
SELECT col_type_is( 'logs', 'checkpoint_logs'::NAME, 'file_recycled'::NAME, 'integer' );
SELECT has_column( 'logs', 'checkpoint_logs'::NAME, 'write'::NAME, 'Column logs.checkpoint_logs.write should exist' );
SELECT col_type_is( 'logs', 'checkpoint_logs'::NAME, 'write'::NAME, 'numeric' );
SELECT has_column( 'logs', 'checkpoint_logs'::NAME, 'sync'::NAME, 'Column logs.checkpoint_logs.sync should exist' );
SELECT col_type_is( 'logs', 'checkpoint_logs'::NAME, 'sync'::NAME, 'numeric' );
SELECT has_column( 'logs', 'checkpoint_logs'::NAME, 'total'::NAME, 'Column logs.checkpoint_logs.total should exist' );
SELECT col_type_is( 'logs', 'checkpoint_logs'::NAME, 'total'::NAME, 'numeric' );
SELECT has_column( 'logs', 'checkpoint_logs'::NAME, 'sync_files'::NAME, 'Column logs.checkpoint_logs.sync_files should exist' );
SELECT col_type_is( 'logs', 'checkpoint_logs'::NAME, 'sync_files'::NAME, 'integer' );
SELECT has_column( 'logs', 'checkpoint_logs'::NAME, 'sync_longest'::NAME, 'Column logs.checkpoint_logs.sync_longest should exist' );
SELECT col_type_is( 'logs', 'checkpoint_logs'::NAME, 'sync_longest'::NAME, 'numeric' );
SELECT has_column( 'logs', 'checkpoint_logs'::NAME, 'sync_avg'::NAME, 'Column logs.checkpoint_logs.sync_avg should exist' );
SELECT col_type_is( 'logs', 'checkpoint_logs'::NAME, 'sync_avg'::NAME, 'numeric' );
SELECT has_column( 'logs', 'checkpoint_logs'::NAME, 'distance'::NAME, 'Column logs.checkpoint_logs.distance should exist' );
SELECT col_type_is( 'logs', 'checkpoint_logs'::NAME, 'distance'::NAME, 'integer' );
SELECT has_column( 'logs', 'checkpoint_logs'::NAME, 'estimate'::NAME, 'Column logs.checkpoint_logs.estimate should exist' );
SELECT col_type_is( 'logs', 'checkpoint_logs'::NAME, 'estimate'::NAME, 'integer' );
SELECT has_table ( 'logs', 'checkpoint_warning_logs'::NAME );
SELECT table_owner_is ( 'logs', 'checkpoint_warning_logs'::NAME, 'grafana'::NAME);
SELECT has_column( 'logs', 'checkpoint_warning_logs'::NAME, 'log_time'::NAME, 'Column logs.checkpoint_warning_logs.log_time should exist' );
SELECT col_type_is( 'logs', 'checkpoint_warning_logs'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'logs', 'checkpoint_warning_logs'::NAME, 'cluster_name'::NAME, 'Column logs.checkpoint_warning_logs.cluster_name should exist' );
SELECT col_type_is( 'logs', 'checkpoint_warning_logs'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'logs', 'checkpoint_warning_logs'::NAME, 'seconds'::NAME, 'Column logs.checkpoint_warning_logs.seconds should exist' );
SELECT col_type_is( 'logs', 'checkpoint_warning_logs'::NAME, 'seconds'::NAME, 'integer' );
SELECT has_column( 'logs', 'checkpoint_warning_logs'::NAME, 'hint'::NAME, 'Column logs.checkpoint_warning_logs.hint should exist' );
SELECT col_type_is( 'logs', 'checkpoint_warning_logs'::NAME, 'hint'::NAME, 'text' );
SELECT has_table ( 'logs', 'lock_logs'::NAME );
SELECT table_owner_is ( 'logs', 'lock_logs'::NAME, 'grafana'::NAME);
SELECT has_column( 'logs', 'lock_logs'::NAME, 'lock_type'::NAME, 'Column logs.lock_logs.lock_type should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'lock_type'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'object_type'::NAME, 'Column logs.lock_logs.object_type should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'object_type'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'relation_id'::NAME, 'Column logs.lock_logs.relation_id should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'relation_id'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'transaction_id2'::NAME, 'Column logs.lock_logs.transaction_id2 should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'transaction_id2'::NAME, 'xid' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'class_id'::NAME, 'Column logs.lock_logs.class_id should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'class_id'::NAME, 'oid' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'relation_tuple'::NAME, 'Column logs.lock_logs.relation_tuple should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'relation_tuple'::NAME, 'tid' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'database_id'::NAME, 'Column logs.lock_logs.database_id should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'database_id'::NAME, 'oid' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'wait_time'::NAME, 'Column logs.lock_logs.wait_time should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'wait_time'::NAME, 'numeric' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'cluster_name'::NAME, 'Column logs.lock_logs.cluster_name should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'log_time'::NAME, 'Column logs.lock_logs.log_time should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'log_time'::NAME, 'timestamp(3) with time zone' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'user_name'::NAME, 'Column logs.lock_logs.user_name should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'user_name'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'database_name'::NAME, 'Column logs.lock_logs.database_name should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'database_name'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'process_id'::NAME, 'Column logs.lock_logs.process_id should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'process_id'::NAME, 'integer' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'connection_from'::NAME, 'Column logs.lock_logs.connection_from should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'connection_from'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'session_id'::NAME, 'Column logs.lock_logs.session_id should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'session_id'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'session_line_num'::NAME, 'Column logs.lock_logs.session_line_num should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'session_line_num'::NAME, 'bigint' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'command_tag'::NAME, 'Column logs.lock_logs.command_tag should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'command_tag'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'session_start_time'::NAME, 'Column logs.lock_logs.session_start_time should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'session_start_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'virtual_transaction_id'::NAME, 'Column logs.lock_logs.virtual_transaction_id should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'virtual_transaction_id'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'transaction_id'::NAME, 'Column logs.lock_logs.transaction_id should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'transaction_id'::NAME, 'bigint' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'message'::NAME, 'Column logs.lock_logs.message should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'message'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'internal_query'::NAME, 'Column logs.lock_logs.internal_query should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'internal_query'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'internal_query_pos'::NAME, 'Column logs.lock_logs.internal_query_pos should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'internal_query_pos'::NAME, 'integer' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'context'::NAME, 'Column logs.lock_logs.context should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'context'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'query'::NAME, 'Column logs.lock_logs.query should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'query'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'query_pos'::NAME, 'Column logs.lock_logs.query_pos should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'query_pos'::NAME, 'integer' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'location'::NAME, 'Column logs.lock_logs.location should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'location'::NAME, 'text' );
SELECT has_column( 'logs', 'lock_logs'::NAME, 'application_name'::NAME, 'Column logs.lock_logs.application_name should exist' );
SELECT col_type_is( 'logs', 'lock_logs'::NAME, 'application_name'::NAME, 'text' );
SELECT has_table ( 'logs', 'lock_message_types'::NAME );
SELECT table_owner_is ( 'logs', 'lock_message_types'::NAME, 'grafana'::NAME);
SELECT has_column( 'logs', 'lock_message_types'::NAME, 'message'::NAME, 'Column logs.lock_message_types.message should exist' );
SELECT col_type_is( 'logs', 'lock_message_types'::NAME, 'message'::NAME, 'text' );
SELECT has_table ( 'logs', 'postgres_log'::NAME );
SELECT table_owner_is ( 'logs', 'postgres_log'::NAME, 'grafana'::NAME);
SELECT has_column( 'logs', 'postgres_log'::NAME, 'cluster_name'::NAME, 'Column logs.postgres_log.cluster_name should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'log_time'::NAME, 'Column logs.postgres_log.log_time should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'user_name'::NAME, 'Column logs.postgres_log.user_name should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'user_name'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'database_name'::NAME, 'Column logs.postgres_log.database_name should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'database_name'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'process_id'::NAME, 'Column logs.postgres_log.process_id should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'process_id'::NAME, 'integer' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'connection_from'::NAME, 'Column logs.postgres_log.connection_from should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'connection_from'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'session_id'::NAME, 'Column logs.postgres_log.session_id should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'session_id'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'session_line_num'::NAME, 'Column logs.postgres_log.session_line_num should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'session_line_num'::NAME, 'bigint' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'command_tag'::NAME, 'Column logs.postgres_log.command_tag should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'command_tag'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'session_start_time'::NAME, 'Column logs.postgres_log.session_start_time should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'session_start_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'virtual_transaction_id'::NAME, 'Column logs.postgres_log.virtual_transaction_id should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'virtual_transaction_id'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'transaction_id'::NAME, 'Column logs.postgres_log.transaction_id should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'transaction_id'::NAME, 'bigint' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'error_severity'::NAME, 'Column logs.postgres_log.error_severity should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'error_severity'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'sql_state_code'::NAME, 'Column logs.postgres_log.sql_state_code should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'sql_state_code'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'message'::NAME, 'Column logs.postgres_log.message should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'message'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'detail'::NAME, 'Column logs.postgres_log.detail should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'detail'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'hint'::NAME, 'Column logs.postgres_log.hint should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'hint'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'internal_query'::NAME, 'Column logs.postgres_log.internal_query should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'internal_query'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'internal_query_pos'::NAME, 'Column logs.postgres_log.internal_query_pos should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'internal_query_pos'::NAME, 'integer' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'context'::NAME, 'Column logs.postgres_log.context should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'context'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'query'::NAME, 'Column logs.postgres_log.query should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'query'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'query_pos'::NAME, 'Column logs.postgres_log.query_pos should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'query_pos'::NAME, 'integer' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'location'::NAME, 'Column logs.postgres_log.location should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'location'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log'::NAME, 'application_name'::NAME, 'Column logs.postgres_log.application_name should exist' );
SELECT col_type_is( 'logs', 'postgres_log'::NAME, 'application_name'::NAME, 'text' );
SELECT has_table ( 'logs', 'postgres_log_databases'::NAME );
SELECT table_owner_is ( 'logs', 'postgres_log_databases'::NAME, 'grafana'::NAME);
SELECT has_column( 'logs', 'postgres_log_databases'::NAME, 'cluster_name'::NAME, 'Column logs.postgres_log_databases.cluster_name should exist' );
SELECT col_type_is( 'logs', 'postgres_log_databases'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log_databases'::NAME, 'database_name'::NAME, 'Column logs.postgres_log_databases.database_name should exist' );
SELECT col_type_is( 'logs', 'postgres_log_databases'::NAME, 'database_name'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log_databases'::NAME, 'start_date'::NAME, 'Column logs.postgres_log_databases.start_date should exist' );
SELECT col_type_is( 'logs', 'postgres_log_databases'::NAME, 'start_date'::NAME, 'timestamp with time zone' );
SELECT has_column( 'logs', 'postgres_log_databases'::NAME, 'end_date'::NAME, 'Column logs.postgres_log_databases.end_date should exist' );
SELECT col_type_is( 'logs', 'postgres_log_databases'::NAME, 'end_date'::NAME, 'timestamp with time zone' );
SELECT has_table ( 'logs', 'postgres_log_databases_temp'::NAME );
SELECT table_owner_is ( 'logs', 'postgres_log_databases_temp'::NAME, 'grafana'::NAME);
SELECT has_column( 'logs', 'postgres_log_databases_temp'::NAME, 'cluster_name'::NAME, 'Column logs.postgres_log_databases_temp.cluster_name should exist' );
SELECT col_type_is( 'logs', 'postgres_log_databases_temp'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log_databases_temp'::NAME, 'database_name'::NAME, 'Column logs.postgres_log_databases_temp.database_name should exist' );
SELECT col_type_is( 'logs', 'postgres_log_databases_temp'::NAME, 'database_name'::NAME, 'text' );
SELECT has_column( 'logs', 'postgres_log_databases_temp'::NAME, 'min'::NAME, 'Column logs.postgres_log_databases_temp.min should exist' );
SELECT col_type_is( 'logs', 'postgres_log_databases_temp'::NAME, 'min'::NAME, 'timestamp with time zone' );
SELECT has_column( 'logs', 'postgres_log_databases_temp'::NAME, 'max'::NAME, 'Column logs.postgres_log_databases_temp.max should exist' );
SELECT col_type_is( 'logs', 'postgres_log_databases_temp'::NAME, 'max'::NAME, 'timestamp with time zone' );
SELECT has_table ( 'stats', 'autovacuum'::NAME );
SELECT table_owner_is ( 'stats', 'autovacuum'::NAME, 'grafana'::NAME);
SELECT has_column( 'stats', 'autovacuum'::NAME, 'log_time'::NAME, 'Column stats.autovacuum.log_time should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'cluster_name'::NAME, 'Column stats.autovacuum.cluster_name should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'database_name'::NAME, 'Column stats.autovacuum.database_name should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'database_name'::NAME, 'name' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'schema_name'::NAME, 'Column stats.autovacuum.schema_name should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'schema_name'::NAME, 'text' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'table_name'::NAME, 'Column stats.autovacuum.table_name should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'table_name'::NAME, 'text' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'name'::NAME, 'Column stats.autovacuum.name should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'name'::NAME, 'text' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'vacuum'::NAME, 'Column stats.autovacuum.vacuum should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'vacuum'::NAME, 'boolean' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'analyze'::NAME, 'Column stats.autovacuum."analyze" should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'analyze'::NAME, 'boolean' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'running_time'::NAME, 'Column stats.autovacuum.running_time should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'running_time'::NAME, 'integer' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'phase'::NAME, 'Column stats.autovacuum.phase should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'phase'::NAME, 'text' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'heap_blks_total'::NAME, 'Column stats.autovacuum.heap_blks_total should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'heap_blks_total'::NAME, 'bigint' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'heap_blks_total_size'::NAME, 'Column stats.autovacuum.heap_blks_total_size should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'heap_blks_total_size'::NAME, 'bigint' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'heap_blks_scanned'::NAME, 'Column stats.autovacuum.heap_blks_scanned should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'heap_blks_scanned'::NAME, 'bigint' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'heap_blks_scanned_pct'::NAME, 'Column stats.autovacuum.heap_blks_scanned_pct should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'heap_blks_scanned_pct'::NAME, 'numeric' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'heap_blks_vacuumed'::NAME, 'Column stats.autovacuum.heap_blks_vacuumed should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'heap_blks_vacuumed'::NAME, 'bigint' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'heap_blks_vacuumed_pct'::NAME, 'Column stats.autovacuum.heap_blks_vacuumed_pct should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'heap_blks_vacuumed_pct'::NAME, 'numeric' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'index_vacuum_count'::NAME, 'Column stats.autovacuum.index_vacuum_count should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'index_vacuum_count'::NAME, 'bigint' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'max_dead_tuples'::NAME, 'Column stats.autovacuum.max_dead_tuples should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'max_dead_tuples'::NAME, 'bigint' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'num_dead_tuples'::NAME, 'Column stats.autovacuum.num_dead_tuples should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'num_dead_tuples'::NAME, 'bigint' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'backend_start'::NAME, 'Column stats.autovacuum.backend_start should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'backend_start'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'wait_event_type'::NAME, 'Column stats.autovacuum.wait_event_type should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'wait_event_type'::NAME, 'text' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'wait_event'::NAME, 'Column stats.autovacuum.wait_event should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'wait_event'::NAME, 'text' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'state'::NAME, 'Column stats.autovacuum.state should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'state'::NAME, 'text' );
SELECT has_column( 'stats', 'autovacuum'::NAME, 'backend_xmin'::NAME, 'Column stats.autovacuum.backend_xmin should exist' );
SELECT col_type_is( 'stats', 'autovacuum'::NAME, 'backend_xmin'::NAME, 'xid' );
SELECT has_table ( 'stats', 'autovacuum_count'::NAME );
SELECT table_owner_is ( 'stats', 'autovacuum_count'::NAME, 'grafana'::NAME);
SELECT has_column( 'stats', 'autovacuum_count'::NAME, 'log_time'::NAME, 'Column stats.autovacuum_count.log_time should exist' );
SELECT col_type_is( 'stats', 'autovacuum_count'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'autovacuum_count'::NAME, 'cluster_name'::NAME, 'Column stats.autovacuum_count.cluster_name should exist' );
SELECT col_type_is( 'stats', 'autovacuum_count'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'stats', 'autovacuum_count'::NAME, 'database_name'::NAME, 'Column stats.autovacuum_count.database_name should exist' );
SELECT col_type_is( 'stats', 'autovacuum_count'::NAME, 'database_name'::NAME, 'name' );
SELECT has_column( 'stats', 'autovacuum_count'::NAME, 'count'::NAME, 'Column stats.autovacuum_count.count should exist' );
SELECT col_type_is( 'stats', 'autovacuum_count'::NAME, 'count'::NAME, 'bigint' );
SELECT has_table ( 'stats', 'autovacuum_thresholds'::NAME );
SELECT table_owner_is ( 'stats', 'autovacuum_thresholds'::NAME, 'grafana'::NAME);
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'log_time'::NAME, 'Column stats.autovacuum_thresholds.log_time should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'cluster_name'::NAME, 'Column stats.autovacuum_thresholds.cluster_name should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'database_name'::NAME, 'Column stats.autovacuum_thresholds.database_name should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'database_name'::NAME, 'name' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'schema_name'::NAME, 'Column stats.autovacuum_thresholds.schema_name should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'schema_name'::NAME, 'name' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'table_name'::NAME, 'Column stats.autovacuum_thresholds.table_name should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'table_name'::NAME, 'name' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'name'::NAME, 'Column stats.autovacuum_thresholds.name should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'name'::NAME, 'text' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'n_tup_ins'::NAME, 'Column stats.autovacuum_thresholds.n_tup_ins should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'n_tup_ins'::NAME, 'bigint' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'n_tup_upd'::NAME, 'Column stats.autovacuum_thresholds.n_tup_upd should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'n_tup_upd'::NAME, 'bigint' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'n_tup_del'::NAME, 'Column stats.autovacuum_thresholds.n_tup_del should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'n_tup_del'::NAME, 'bigint' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'n_live_tup'::NAME, 'Column stats.autovacuum_thresholds.n_live_tup should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'n_live_tup'::NAME, 'bigint' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'n_dead_tup'::NAME, 'Column stats.autovacuum_thresholds.n_dead_tup should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'n_dead_tup'::NAME, 'bigint' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'reltuples'::NAME, 'Column stats.autovacuum_thresholds.reltuples should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'reltuples'::NAME, 'real' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'av_threshold'::NAME, 'Column stats.autovacuum_thresholds.av_threshold should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'av_threshold'::NAME, 'double precision' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'last_vacuum'::NAME, 'Column stats.autovacuum_thresholds.last_vacuum should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'last_vacuum'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'last_analyze'::NAME, 'Column stats.autovacuum_thresholds.last_analyze should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'last_analyze'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'av_neaded'::NAME, 'Column stats.autovacuum_thresholds.av_neaded should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'av_neaded'::NAME, 'boolean' );
SELECT has_column( 'stats', 'autovacuum_thresholds'::NAME, 'pct_dead'::NAME, 'Column stats.autovacuum_thresholds.pct_dead should exist' );
SELECT col_type_is( 'stats', 'autovacuum_thresholds'::NAME, 'pct_dead'::NAME, 'numeric' );
SELECT has_table ( 'stats', 'custom_table_settings'::NAME );
SELECT table_owner_is ( 'stats', 'custom_table_settings'::NAME, 'grafana'::NAME);
SELECT has_column( 'stats', 'custom_table_settings'::NAME, 'log_time'::NAME, 'Column stats.custom_table_settings.log_time should exist' );
SELECT col_type_is( 'stats', 'custom_table_settings'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'custom_table_settings'::NAME, 'cluster_name'::NAME, 'Column stats.custom_table_settings.cluster_name should exist' );
SELECT col_type_is( 'stats', 'custom_table_settings'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'stats', 'custom_table_settings'::NAME, 'database_name'::NAME, 'Column stats.custom_table_settings.database_name should exist' );
SELECT col_type_is( 'stats', 'custom_table_settings'::NAME, 'database_name'::NAME, 'name' );
SELECT has_column( 'stats', 'custom_table_settings'::NAME, 'schema_name'::NAME, 'Column stats.custom_table_settings.schema_name should exist' );
SELECT col_type_is( 'stats', 'custom_table_settings'::NAME, 'schema_name'::NAME, 'name' );
SELECT has_column( 'stats', 'custom_table_settings'::NAME, 'table_name'::NAME, 'Column stats.custom_table_settings.table_name should exist' );
SELECT col_type_is( 'stats', 'custom_table_settings'::NAME, 'table_name'::NAME, 'name' );
SELECT has_column( 'stats', 'custom_table_settings'::NAME, 'Table Name'::NAME, 'Column stats.custom_table_settings."Table Name" should exist' );
SELECT col_type_is( 'stats', 'custom_table_settings'::NAME, 'Table Name'::NAME, 'text' );
SELECT has_column( 'stats', 'custom_table_settings'::NAME, 'Table Setting'::NAME, 'Column stats.custom_table_settings."Table Setting" should exist' );
SELECT col_type_is( 'stats', 'custom_table_settings'::NAME, 'Table Setting'::NAME, 'text' );
SELECT has_table ( 'stats', 'granted_locks'::NAME );
SELECT table_owner_is ( 'stats', 'granted_locks'::NAME, 'grafana'::NAME);
SELECT has_column( 'stats', 'granted_locks'::NAME, 'log_time'::NAME, 'Column stats.granted_locks.log_time should exist' );
SELECT col_type_is( 'stats', 'granted_locks'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'granted_locks'::NAME, 'cluster_name'::NAME, 'Column stats.granted_locks.cluster_name should exist' );
SELECT col_type_is( 'stats', 'granted_locks'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'stats', 'granted_locks'::NAME, 'database_name'::NAME, 'Column stats.granted_locks.database_name should exist' );
SELECT col_type_is( 'stats', 'granted_locks'::NAME, 'database_name'::NAME, 'name' );
SELECT has_column( 'stats', 'granted_locks'::NAME, 'Time'::NAME, 'Column stats.granted_locks."Time" should exist' );
SELECT col_type_is( 'stats', 'granted_locks'::NAME, 'Time'::NAME, 'double precision' );
SELECT has_column( 'stats', 'granted_locks'::NAME, 'PG Process ID'::NAME, 'Column stats.granted_locks."PG Process ID" should exist' );
SELECT col_type_is( 'stats', 'granted_locks'::NAME, 'PG Process ID'::NAME, 'integer' );
SELECT has_column( 'stats', 'granted_locks'::NAME, 'Application Name'::NAME, 'Column stats.granted_locks."Application Name" should exist' );
SELECT col_type_is( 'stats', 'granted_locks'::NAME, 'Application Name'::NAME, 'text' );
SELECT has_column( 'stats', 'granted_locks'::NAME, 'Transaction Start'::NAME, 'Column stats.granted_locks."Transaction Start" should exist' );
SELECT col_type_is( 'stats', 'granted_locks'::NAME, 'Transaction Start'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'granted_locks'::NAME, 'Locks'::NAME, 'Column stats.granted_locks."Locks" should exist' );
SELECT col_type_is( 'stats', 'granted_locks'::NAME, 'Locks'::NAME, 'text' );
SELECT has_column( 'stats', 'granted_locks'::NAME, 'AutoVacuum'::NAME, 'Column stats.granted_locks."AutoVacuum" should exist' );
SELECT col_type_is( 'stats', 'granted_locks'::NAME, 'AutoVacuum'::NAME, 'text' );
SELECT has_table ( 'stats', 'pg_database'::NAME );
SELECT table_owner_is ( 'stats', 'pg_database'::NAME, 'grafana'::NAME);
SELECT has_column( 'stats', 'pg_database'::NAME, 'log_time'::NAME, 'Column stats.pg_database.log_time should exist' );
SELECT col_type_is( 'stats', 'pg_database'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'pg_database'::NAME, 'cluster_name'::NAME, 'Column stats.pg_database.cluster_name should exist' );
SELECT col_type_is( 'stats', 'pg_database'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_database'::NAME, 'database_name'::NAME, 'Column stats.pg_database.database_name should exist' );
SELECT col_type_is( 'stats', 'pg_database'::NAME, 'database_name'::NAME, 'name' );
SELECT has_table ( 'stats', 'pg_settings'::NAME );
SELECT table_owner_is ( 'stats', 'pg_settings'::NAME, 'grafana'::NAME);
SELECT has_column( 'stats', 'pg_settings'::NAME, 'log_time'::NAME, 'Column stats.pg_settings.log_time should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'cluster_name'::NAME, 'Column stats.pg_settings.cluster_name should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'name'::NAME, 'Column stats.pg_settings.name should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'name'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'setting'::NAME, 'Column stats.pg_settings.setting should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'setting'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'unit'::NAME, 'Column stats.pg_settings.unit should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'unit'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'category'::NAME, 'Column stats.pg_settings.category should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'category'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'short_desc'::NAME, 'Column stats.pg_settings.short_desc should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'short_desc'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'extra_desc'::NAME, 'Column stats.pg_settings.extra_desc should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'extra_desc'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'context'::NAME, 'Column stats.pg_settings.context should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'context'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'vartype'::NAME, 'Column stats.pg_settings.vartype should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'vartype'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'source'::NAME, 'Column stats.pg_settings.source should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'source'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'min_val'::NAME, 'Column stats.pg_settings.min_val should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'min_val'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'max_val'::NAME, 'Column stats.pg_settings.max_val should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'max_val'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'enumvals'::NAME, 'Column stats.pg_settings.enumvals should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'enumvals'::NAME, 'text[]' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'boot_val'::NAME, 'Column stats.pg_settings.boot_val should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'boot_val'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'reset_val'::NAME, 'Column stats.pg_settings.reset_val should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'reset_val'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'sourcefile'::NAME, 'Column stats.pg_settings.sourcefile should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'sourcefile'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'sourceline'::NAME, 'Column stats.pg_settings.sourceline should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'sourceline'::NAME, 'integer' );
SELECT has_column( 'stats', 'pg_settings'::NAME, 'pending_restart'::NAME, 'Column stats.pg_settings.pending_restart should exist' );
SELECT col_type_is( 'stats', 'pg_settings'::NAME, 'pending_restart'::NAME, 'boolean' );
SELECT has_table ( 'stats', 'pg_stat_activity'::NAME );
SELECT table_owner_is ( 'stats', 'pg_stat_activity'::NAME, 'grafana'::NAME);
SELECT has_column( 'stats', 'pg_stat_activity'::NAME, 'log_time'::NAME, 'Column stats.pg_stat_activity.log_time should exist' );
SELECT col_type_is( 'stats', 'pg_stat_activity'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'pg_stat_activity'::NAME, 'cluster_name'::NAME, 'Column stats.pg_stat_activity.cluster_name should exist' );
SELECT col_type_is( 'stats', 'pg_stat_activity'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_stat_activity'::NAME, 'database_name'::NAME, 'Column stats.pg_stat_activity.database_name should exist' );
SELECT col_type_is( 'stats', 'pg_stat_activity'::NAME, 'database_name'::NAME, 'name' );
SELECT has_column( 'stats', 'pg_stat_activity'::NAME, 'pid'::NAME, 'Column stats.pg_stat_activity.pid should exist' );
SELECT col_type_is( 'stats', 'pg_stat_activity'::NAME, 'pid'::NAME, 'integer' );
SELECT has_column( 'stats', 'pg_stat_activity'::NAME, 'state'::NAME, 'Column stats.pg_stat_activity.state should exist' );
SELECT col_type_is( 'stats', 'pg_stat_activity'::NAME, 'state'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_stat_activity'::NAME, 'application_name'::NAME, 'Column stats.pg_stat_activity.application_name should exist' );
SELECT col_type_is( 'stats', 'pg_stat_activity'::NAME, 'application_name'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_stat_activity'::NAME, 'backend_type'::NAME, 'Column stats.pg_stat_activity.backend_type should exist' );
SELECT col_type_is( 'stats', 'pg_stat_activity'::NAME, 'backend_type'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_stat_activity'::NAME, 'wait_event_type'::NAME, 'Column stats.pg_stat_activity.wait_event_type should exist' );
SELECT col_type_is( 'stats', 'pg_stat_activity'::NAME, 'wait_event_type'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_stat_activity'::NAME, 'wait_event'::NAME, 'Column stats.pg_stat_activity.wait_event should exist' );
SELECT col_type_is( 'stats', 'pg_stat_activity'::NAME, 'wait_event'::NAME, 'text' );
SELECT has_column( 'stats', 'pg_stat_activity'::NAME, 'backend_start'::NAME, 'Column stats.pg_stat_activity.backend_start should exist' );
SELECT col_type_is( 'stats', 'pg_stat_activity'::NAME, 'backend_start'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'pg_stat_activity'::NAME, 'xact_start'::NAME, 'Column stats.pg_stat_activity.xact_start should exist' );
SELECT col_type_is( 'stats', 'pg_stat_activity'::NAME, 'xact_start'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'pg_stat_activity'::NAME, 'query_start'::NAME, 'Column stats.pg_stat_activity.query_start should exist' );
SELECT col_type_is( 'stats', 'pg_stat_activity'::NAME, 'query_start'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'pg_stat_activity'::NAME, 'state_change'::NAME, 'Column stats.pg_stat_activity.state_change should exist' );
SELECT col_type_is( 'stats', 'pg_stat_activity'::NAME, 'state_change'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'pg_stat_activity'::NAME, 'backend_xmin'::NAME, 'Column stats.pg_stat_activity.backend_xmin should exist' );
SELECT col_type_is( 'stats', 'pg_stat_activity'::NAME, 'backend_xmin'::NAME, 'xid' );
SELECT has_table ( 'stats', 'replication_status'::NAME );
SELECT table_owner_is ( 'stats', 'replication_status'::NAME, 'grafana'::NAME);
SELECT has_column( 'stats', 'replication_status'::NAME, 'log_time'::NAME, 'Column stats.replication_status.log_time should exist' );
SELECT col_type_is( 'stats', 'replication_status'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'replication_status'::NAME, 'cluster_name'::NAME, 'Column stats.replication_status.cluster_name should exist' );
SELECT col_type_is( 'stats', 'replication_status'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'stats', 'replication_status'::NAME, 'status'::NAME, 'Column stats.replication_status.status should exist' );
SELECT col_type_is( 'stats', 'replication_status'::NAME, 'status'::NAME, 'text' );
SELECT has_table ( 'stats', 'table_stats'::NAME );
SELECT table_owner_is ( 'stats', 'table_stats'::NAME, 'grafana'::NAME);
SELECT has_column( 'stats', 'table_stats'::NAME, 'log_time'::NAME, 'Column stats.table_stats.log_time should exist' );
SELECT col_type_is( 'stats', 'table_stats'::NAME, 'log_time'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'table_stats'::NAME, 'cluster_name'::NAME, 'Column stats.table_stats.cluster_name should exist' );
SELECT col_type_is( 'stats', 'table_stats'::NAME, 'cluster_name'::NAME, 'text' );
SELECT has_column( 'stats', 'table_stats'::NAME, 'database_name'::NAME, 'Column stats.table_stats.database_name should exist' );
SELECT col_type_is( 'stats', 'table_stats'::NAME, 'database_name'::NAME, 'name' );
SELECT has_column( 'stats', 'table_stats'::NAME, 'schema_name'::NAME, 'Column stats.table_stats.schema_name should exist' );
SELECT col_type_is( 'stats', 'table_stats'::NAME, 'schema_name'::NAME, 'name' );
SELECT has_column( 'stats', 'table_stats'::NAME, 'table_name'::NAME, 'Column stats.table_stats.table_name should exist' );
SELECT col_type_is( 'stats', 'table_stats'::NAME, 'table_name'::NAME, 'name' );
SELECT has_column( 'stats', 'table_stats'::NAME, 'name'::NAME, 'Column stats.table_stats.name should exist' );
SELECT col_type_is( 'stats', 'table_stats'::NAME, 'name'::NAME, 'text' );
SELECT has_column( 'stats', 'table_stats'::NAME, 'last_vacuum'::NAME, 'Column stats.table_stats.last_vacuum should exist' );
SELECT col_type_is( 'stats', 'table_stats'::NAME, 'last_vacuum'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'table_stats'::NAME, 'last_analyze'::NAME, 'Column stats.table_stats.last_analyze should exist' );
SELECT col_type_is( 'stats', 'table_stats'::NAME, 'last_analyze'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'table_stats'::NAME, 'last_autovacuum'::NAME, 'Column stats.table_stats.last_autovacuum should exist' );
SELECT col_type_is( 'stats', 'table_stats'::NAME, 'last_autovacuum'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'table_stats'::NAME, 'last_autoanalyze'::NAME, 'Column stats.table_stats.last_autoanalyze should exist' );
SELECT col_type_is( 'stats', 'table_stats'::NAME, 'last_autoanalyze'::NAME, 'timestamp with time zone' );
SELECT has_column( 'stats', 'table_stats'::NAME, 'time'::NAME, 'Column stats.table_stats."time" should exist' );
SELECT col_type_is( 'stats', 'table_stats'::NAME, 'time'::NAME, 'timestamp with time zone' );
SELECT has_table ( 'tools', 'build_items'::NAME );
SELECT table_owner_is ( 'tools', 'build_items'::NAME, 'grafana'::NAME);
SELECT has_column( 'tools', 'build_items'::NAME, 'item_schema'::NAME, 'Column tools.build_items.item_schema should exist' );
SELECT col_type_is( 'tools', 'build_items'::NAME, 'item_schema'::NAME, 'name' );
SELECT has_column( 'tools', 'build_items'::NAME, 'item_name'::NAME, 'Column tools.build_items.item_name should exist' );
SELECT col_type_is( 'tools', 'build_items'::NAME, 'item_name'::NAME, 'name' );
SELECT has_column( 'tools', 'build_items'::NAME, 'item_sql'::NAME, 'Column tools.build_items.item_sql should exist' );
SELECT col_type_is( 'tools', 'build_items'::NAME, 'item_sql'::NAME, 'text' );
SELECT has_column( 'tools', 'build_items'::NAME, 'build_order'::NAME, 'Column tools.build_items.build_order should exist' );
SELECT col_type_is( 'tools', 'build_items'::NAME, 'build_order'::NAME, 'numeric' );
SELECT has_column( 'tools', 'build_items'::NAME, 'disabled'::NAME, 'Column tools.build_items.disabled should exist' );
SELECT col_type_is( 'tools', 'build_items'::NAME, 'disabled'::NAME, 'boolean' );
SELECT has_table ( 'tools', 'hypertables'::NAME );
SELECT table_owner_is ( 'tools', 'hypertables'::NAME, 'grafana'::NAME);
SELECT has_column( 'tools', 'hypertables'::NAME, 'hypertable_id'::NAME, 'Column tools.hypertables.hypertable_id should exist' );
SELECT col_type_is( 'tools', 'hypertables'::NAME, 'hypertable_id'::NAME, 'bigint' );
SELECT has_column( 'tools', 'hypertables'::NAME, 'schema_name'::NAME, 'Column tools.hypertables.schema_name should exist' );
SELECT col_type_is( 'tools', 'hypertables'::NAME, 'schema_name'::NAME, 'name' );
SELECT has_column( 'tools', 'hypertables'::NAME, 'table_name'::NAME, 'Column tools.hypertables.table_name should exist' );
SELECT col_type_is( 'tools', 'hypertables'::NAME, 'table_name'::NAME, 'name' );
SELECT has_column( 'tools', 'hypertables'::NAME, 'time_column_name'::NAME, 'Column tools.hypertables.time_column_name should exist' );
SELECT col_type_is( 'tools', 'hypertables'::NAME, 'time_column_name'::NAME, 'name' );
SELECT has_column( 'tools', 'hypertables'::NAME, 'partitioning_column'::NAME, 'Column tools.hypertables.partitioning_column should exist' );
SELECT col_type_is( 'tools', 'hypertables'::NAME, 'partitioning_column'::NAME, 'name' );
SELECT has_column( 'tools', 'hypertables'::NAME, 'hash_partitions'::NAME, 'Column tools.hypertables.hash_partitions should exist' );
SELECT col_type_is( 'tools', 'hypertables'::NAME, 'hash_partitions'::NAME, 'integer' );
SELECT has_column( 'tools', 'hypertables'::NAME, 'chunk_time_interval'::NAME, 'Column tools.hypertables.chunk_time_interval should exist' );
SELECT col_type_is( 'tools', 'hypertables'::NAME, 'chunk_time_interval'::NAME, 'interval' );
SELECT has_column( 'tools', 'hypertables'::NAME, 'drop_chunk_policy'::NAME, 'Column tools.hypertables.drop_chunk_policy should exist' );
SELECT col_type_is( 'tools', 'hypertables'::NAME, 'drop_chunk_policy'::NAME, 'interval' );
SELECT has_column( 'tools', 'hypertables'::NAME, 'compress_chunk_policy'::NAME, 'Column tools.hypertables.compress_chunk_policy should exist' );
SELECT col_type_is( 'tools', 'hypertables'::NAME, 'compress_chunk_policy'::NAME, 'interval' );
SELECT has_column( 'tools', 'hypertables'::NAME, 'compress_orderby'::NAME, 'Column tools.hypertables.compress_orderby should exist' );
SELECT col_type_is( 'tools', 'hypertables'::NAME, 'compress_orderby'::NAME, 'text' );
SELECT has_column( 'tools', 'hypertables'::NAME, 'compress_segmentby'::NAME, 'Column tools.hypertables.compress_segmentby should exist' );
SELECT col_type_is( 'tools', 'hypertables'::NAME, 'compress_segmentby'::NAME, 'text' );
SELECT has_table ( 'tools', 'queries_disabled'::NAME );
SELECT table_owner_is ( 'tools', 'queries_disabled'::NAME, 'grafana'::NAME);
SELECT has_column( 'tools', 'queries_disabled'::NAME, 'server_name'::NAME, 'Column tools.queries_disabled.server_name should exist' );
SELECT col_type_is( 'tools', 'queries_disabled'::NAME, 'server_name'::NAME, 'text' );
SELECT has_column( 'tools', 'queries_disabled'::NAME, 'database_name'::NAME, 'Column tools.queries_disabled.database_name should exist' );
SELECT col_type_is( 'tools', 'queries_disabled'::NAME, 'database_name'::NAME, 'text' );
SELECT has_column( 'tools', 'queries_disabled'::NAME, 'port'::NAME, 'Column tools.queries_disabled.port should exist' );
SELECT col_type_is( 'tools', 'queries_disabled'::NAME, 'port'::NAME, 'integer' );
SELECT has_column( 'tools', 'queries_disabled'::NAME, 'query_name'::NAME, 'Column tools.queries_disabled.query_name should exist' );
SELECT col_type_is( 'tools', 'queries_disabled'::NAME, 'query_name'::NAME, 'text' );
SELECT has_table ( 'tools', 'query'::NAME );
SELECT table_owner_is ( 'tools', 'query'::NAME, 'grafana'::NAME);
SELECT has_column( 'tools', 'query'::NAME, 'query_name'::NAME, 'Column tools.query.query_name should exist' );
SELECT col_type_is( 'tools', 'query'::NAME, 'query_name'::NAME, 'text' );
SELECT has_column( 'tools', 'query'::NAME, 'sql'::NAME, 'Column tools.query.sql should exist' );
SELECT col_type_is( 'tools', 'query'::NAME, 'sql'::NAME, 'text' );
SELECT has_column( 'tools', 'query'::NAME, 'disabled'::NAME, 'Column tools.query.disabled should exist' );
SELECT col_type_is( 'tools', 'query'::NAME, 'disabled'::NAME, 'boolean' );
SELECT has_column( 'tools', 'query'::NAME, 'maintenance_db_only'::NAME, 'Column tools.query.maintenance_db_only should exist' );
SELECT col_type_is( 'tools', 'query'::NAME, 'maintenance_db_only'::NAME, 'boolean' );
SELECT has_column( 'tools', 'query'::NAME, 'pg_version'::NAME, 'Column tools.query.pg_version should exist' );
SELECT col_type_is( 'tools', 'query'::NAME, 'pg_version'::NAME, 'numeric' );
SELECT has_column( 'tools', 'query'::NAME, 'run_order'::NAME, 'Column tools.query.run_order should exist' );
SELECT col_type_is( 'tools', 'query'::NAME, 'run_order'::NAME, 'integer' );
SELECT has_column( 'tools', 'query'::NAME, 'schema_name'::NAME, 'Column tools.query.schema_name should exist' );
SELECT col_type_is( 'tools', 'query'::NAME, 'schema_name'::NAME, 'name' );
SELECT has_column( 'tools', 'query'::NAME, 'table_name'::NAME, 'Column tools.query.table_name should exist' );
SELECT col_type_is( 'tools', 'query'::NAME, 'table_name'::NAME, 'name' );
SELECT has_table ( 'tools', 'servers'::NAME );
SELECT table_owner_is ( 'tools', 'servers'::NAME, 'grafana'::NAME);
SELECT has_column( 'tools', 'servers'::NAME, 'server_name'::NAME, 'Column tools.servers.server_name should exist' );
SELECT col_type_is( 'tools', 'servers'::NAME, 'server_name'::NAME, 'text' );
SELECT has_column( 'tools', 'servers'::NAME, 'server'::NAME, 'Column tools.servers.server should exist' );
SELECT col_type_is( 'tools', 'servers'::NAME, 'server'::NAME, 'text' );
SELECT has_column( 'tools', 'servers'::NAME, 'port'::NAME, 'Column tools.servers.port should exist' );
SELECT col_type_is( 'tools', 'servers'::NAME, 'port'::NAME, 'integer' );
SELECT has_column( 'tools', 'servers'::NAME, 'maintenance_database'::NAME, 'Column tools.servers.maintenance_database should exist' );
SELECT col_type_is( 'tools', 'servers'::NAME, 'maintenance_database'::NAME, 'name' );
SELECT has_column( 'tools', 'servers'::NAME, 'username'::NAME, 'Column tools.servers.username should exist' );
SELECT col_type_is( 'tools', 'servers'::NAME, 'username'::NAME, 'text' );
SELECT has_column( 'tools', 'servers'::NAME, 'password'::NAME, 'Column tools.servers.password should exist' );
SELECT col_type_is( 'tools', 'servers'::NAME, 'password'::NAME, 'text' );
SELECT has_column( 'tools', 'servers'::NAME, 'read_all_databases'::NAME, 'Column tools.servers.read_all_databases should exist' );
SELECT col_type_is( 'tools', 'servers'::NAME, 'read_all_databases'::NAME, 'boolean' );
SELECT has_column( 'tools', 'servers'::NAME, 'disabled'::NAME, 'Column tools.servers.disabled should exist' );
SELECT col_type_is( 'tools', 'servers'::NAME, 'disabled'::NAME, 'boolean' );
SELECT has_column( 'tools', 'servers'::NAME, 'maintenance_db'::NAME, 'Column tools.servers.maintenance_db should exist' );
SELECT col_type_is( 'tools', 'servers'::NAME, 'maintenance_db'::NAME, 'boolean' );
SELECT has_column( 'tools', 'servers'::NAME, 'pgpass_file'::NAME, 'Column tools.servers.pgpass_file should exist' );
SELECT col_type_is( 'tools', 'servers'::NAME, 'pgpass_file'::NAME, 'text' );
SELECT has_table ( 'tools', 'version'::NAME );
SELECT table_owner_is ( 'tools', 'version'::NAME, 'grafana'::NAME);
SELECT has_column( 'tools', 'version'::NAME, 'db_version'::NAME, 'Column tools.version.db_version should exist' );
SELECT col_type_is( 'tools', 'version'::NAME, 'db_version'::NAME, 'text' );

SELECT diag('=================================');
SELECT diag('View Tests');
SELECT has_view ( 'logs', 'autovacuum_length'::NAME, 'View logs.autovacuum_length should exist' );
SELECT view_owner_is ( 'logs', 'autovacuum_length'::NAME, 'grafana'::NAME);
SELECT has_view ( 'logs', 'databases'::NAME, 'View logs.databases should exist' );
SELECT view_owner_is ( 'logs', 'databases'::NAME, 'grafana'::NAME);
SELECT has_view ( 'logs', 'hypertable'::NAME, 'View logs.hypertable should exist' );
SELECT view_owner_is ( 'logs', 'hypertable'::NAME, 'grafana'::NAME);
SELECT has_view ( 'logs', 'last_log_entries'::NAME, 'View logs.last_log_entries should exist' );
SELECT view_owner_is ( 'logs', 'last_log_entries'::NAME, 'grafana'::NAME);
SELECT has_view ( 'tools', 'pg_major_version'::NAME, 'View tools.pg_major_version should exist' );
SELECT view_owner_is ( 'tools', 'pg_major_version'::NAME, 'grafana'::NAME);
SELECT has_view ( 'tools', 'table_size'::NAME, 'View tools.table_size should exist' );
SELECT view_owner_is ( 'tools', 'table_size'::NAME, 'grafana'::NAME);

SELECT diag('=================================');
SELECT diag('Function Tests');
SELECT has_function ( 'tools', 'postgres_log_trigger'::NAME );
SELECT function_owner_is ( 'tools', 'postgres_log_trigger'::NAME, '{}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'create_logs'::NAME );
SELECT function_owner_is ( 'tools', 'create_logs'::NAME, '{}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'create_server_database_inherits'::NAME, 'text,text' );
SELECT function_owner_is ( 'tools', 'create_server_database_inherits'::NAME, '{text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'create_server_inherits'::NAME, 'text' );
SELECT function_owner_is ( 'tools', 'create_server_inherits'::NAME, '{text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'delete_logs'::NAME );
SELECT function_owner_is ( 'tools', 'delete_logs'::NAME, '{}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'field_list_check'::NAME, 'text,text' );
SELECT function_owner_is ( 'tools', 'field_list_check'::NAME, '{text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'connection_attempt_history'::NAME, 'text,text,text[],text,text,boolean,boolean' );
SELECT function_owner_is ( 'logs', 'connection_attempt_history'::NAME, '{text,text,text[],text,text,boolean,boolean}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'connection_history'::NAME, 'text,text,text[],text,text,boolean,boolean' );
SELECT function_owner_is ( 'logs', 'connection_history'::NAME, '{text,text,text[],text,text,boolean,boolean}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'generate_timestamps'::NAME, 'text,text' );
SELECT function_owner_is ( 'tools', 'generate_timestamps'::NAME, '{text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'group_by_interval'::NAME, 'text,text' );
SELECT function_owner_is ( 'tools', 'group_by_interval'::NAME, '{text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'interval_to_field'::NAME, 'text' );
SELECT function_owner_is ( 'tools', 'interval_to_field'::NAME, '{text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'parse_csv'::NAME, 'text,boolean' );
SELECT function_owner_is ( 'tools', 'parse_csv'::NAME, '{text,boolean}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autoanalyze_log'::NAME, 'text,text,text,text,text,bigint' );
SELECT function_owner_is ( 'logs', 'autoanalyze_log'::NAME, '{text,text,text,text,text,bigint}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autoanalyze_log_count'::NAME, 'text,text,timestamp with time zone,timestamp with time zone,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autoanalyze_log_count'::NAME, '{text,text,timestamp with time zone,timestamp with time zone,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autoanalyze_log_count_chart'::NAME, 'text,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autoanalyze_log_count_chart'::NAME, '{text,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_autoanalyze_count'::NAME, 'text,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_autoanalyze_count'::NAME, '{text,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'error_history'::NAME, 'text,text,text[],text,text,boolean' );
SELECT function_owner_is ( 'logs', 'error_history'::NAME, '{text,text,text[],text,text,boolean}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'fatal_history'::NAME, 'text,text,text[],text,text,boolean' );
SELECT function_owner_is ( 'logs', 'fatal_history'::NAME, '{text,text,text[],text,text,boolean}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_log'::NAME, 'text,text,text,text,text,bigint' );
SELECT function_owner_is ( 'logs', 'autovacuum_log'::NAME, '{text,text,text,text,text,bigint}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_log_count'::NAME, 'text,text,timestamp with time zone,timestamp with time zone,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_log_count'::NAME, '{text,text,timestamp with time zone,timestamp with time zone,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_log_count_chart'::NAME, 'text,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_log_count_chart'::NAME, '{text,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_log_removed_size'::NAME, 'text,text,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_log_removed_size'::NAME, '{text,text,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_log_removed_space_chart'::NAME, 'text,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_log_removed_space_chart'::NAME, '{text,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_log_tuples_removed'::NAME, 'text,text,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_log_tuples_removed'::NAME, '{text,text,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_log_tuples_removed_chart'::NAME, 'text,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_log_tuples_removed_chart'::NAME, '{text,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_thresholds'::NAME, 'text,text,text,timestamp with time zone,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_thresholds'::NAME, '{text,text,text,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'checkpoint_buffers'::NAME, 'text,text,timestamp with time zone,timestamp with time zone,text' );
SELECT function_owner_is ( 'logs', 'checkpoint_buffers'::NAME, '{text,text,timestamp with time zone,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'checkpoint_files'::NAME, 'text,text,timestamp with time zone,timestamp with time zone,text' );
SELECT function_owner_is ( 'logs', 'checkpoint_files'::NAME, '{text,text,timestamp with time zone,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'checkpoint_logs'::NAME, 'text,text,bigint' );
SELECT function_owner_is ( 'logs', 'checkpoint_logs'::NAME, '{text,text,bigint}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'checkpoint_wal_file_usage'::NAME, 'text,text,timestamp with time zone,timestamp with time zone,text' );
SELECT function_owner_is ( 'logs', 'checkpoint_wal_file_usage'::NAME, '{text,text,timestamp with time zone,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'checkpoint_warning_logs'::NAME, 'text,text,bigint' );
SELECT function_owner_is ( 'logs', 'checkpoint_warning_logs'::NAME, '{text,text,bigint}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'stats', 'vacuum_settings'::NAME, 'text,text,timestamp with time zone,text' );
SELECT function_owner_is ( 'stats', 'vacuum_settings'::NAME, '{text,text,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'custom_table_settings'::NAME, 'text,text,timestamp with time zone,text' );
SELECT function_owner_is ( 'logs', 'custom_table_settings'::NAME, '{text,text,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'checkpoint_warning_logs_count'::NAME, 'text,text,timestamp with time zone,timestamp with time zone,text' );
SELECT function_owner_is ( 'logs', 'checkpoint_warning_logs_count'::NAME, '{text,text,timestamp with time zone,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'checkpoint_write_buffers'::NAME, 'text,text,timestamp with time zone,timestamp with time zone,text' );
SELECT function_owner_is ( 'logs', 'checkpoint_write_buffers'::NAME, '{text,text,timestamp with time zone,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'stats', 'autovacuum'::NAME, 'text,text,text,timestamp without time zone,text' );
SELECT function_owner_is ( 'stats', 'autovacuum'::NAME, '{text,text,text,timestamp without time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'stats', 'pg_stat_activity_active'::NAME, 'text,text,timestamp with time zone,text' );
SELECT function_owner_is ( 'stats', 'pg_stat_activity_active'::NAME, '{text,text,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'stats', 'granted_locks'::NAME, 'text,text,timestamp with time zone,text' );
SELECT function_owner_is ( 'stats', 'granted_locks'::NAME, '{text,text,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'ldap_error_history'::NAME, 'text,text,text[],text,text,boolean' );
SELECT function_owner_is ( 'logs', 'ldap_error_history'::NAME, '{text,text,text[],text,text,boolean}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'update_pg_log_databases'::NAME );
SELECT function_owner_is ( 'logs', 'update_pg_log_databases'::NAME, '{}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'timescaledb_enterprise'::NAME );
SELECT function_owner_is ( 'tools', 'timescaledb_enterprise'::NAME, '{}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'timescaledb_drop_chunks'::NAME );
SELECT function_owner_is ( 'tools', 'timescaledb_drop_chunks'::NAME, '{}'::regtype[]::name[], 'grafana'::NAME);
