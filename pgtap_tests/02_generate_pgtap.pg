-- USE SELECT * FROM tools.generate_pgtap(); TO GENERATE THIS FILE
\connect pgmonitor_db

-- Setup Test Variables
\set test_name 'permissions'
\set test_user 'grafana'
\set test_production_database 'pgmonitor_db'
\set plan 157

-- Install pgTAP, show diagnostics, and start common tests
--\ir ../common/diagnostic.sql
\i common/diagnostics.pg

SELECT diag('=================================');
SELECT diag('Role Tests');
SELECT has_role('grafana'::name);
SELECT diag('=================================');
SELECT diag('Schema Tests');
SELECT has_schema('logs');
SELECT schema_owner_is('logs', 'grafana'::NAME);
SELECT has_schema('stats');
SELECT schema_owner_is('stats', 'grafana'::NAME);
SELECT has_schema('tools');
SELECT schema_owner_is('tools', 'grafana'::NAME);
SELECT diag('=================================');
SELECT diag('Table Tests');
SELECT has_table ( 'logs', 'archive_failure_log'::NAME );
SELECT table_owner_is ( 'logs', 'archive_failure_log'::NAME, 'grafana'::NAME);
SELECT has_table ( 'logs', 'autoanalyze_logs'::NAME );
SELECT table_owner_is ( 'logs', 'autoanalyze_logs'::NAME, 'grafana'::NAME);
SELECT has_table ( 'logs', 'autovacuum_logs'::NAME );
SELECT table_owner_is ( 'logs', 'autovacuum_logs'::NAME, 'grafana'::NAME);
SELECT has_table ( 'logs', 'checkpoint_logs'::NAME );
SELECT table_owner_is ( 'logs', 'checkpoint_logs'::NAME, 'grafana'::NAME);
SELECT has_table ( 'logs', 'checkpoint_warning_logs'::NAME );
SELECT table_owner_is ( 'logs', 'checkpoint_warning_logs'::NAME, 'grafana'::NAME);
SELECT has_table ( 'logs', 'lock_logs'::NAME );
SELECT table_owner_is ( 'logs', 'lock_logs'::NAME, 'grafana'::NAME);
SELECT has_table ( 'logs', 'lock_message_types'::NAME );
SELECT table_owner_is ( 'logs', 'lock_message_types'::NAME, 'grafana'::NAME);
SELECT has_table ( 'logs', 'postgres_log'::NAME );
SELECT table_owner_is ( 'logs', 'postgres_log'::NAME, 'grafana'::NAME);
SELECT has_table ( 'logs', 'postgres_log_databases'::NAME );
SELECT table_owner_is ( 'logs', 'postgres_log_databases'::NAME, 'grafana'::NAME);
SELECT has_table ( 'logs', 'postgres_log_databases_temp'::NAME );
SELECT table_owner_is ( 'logs', 'postgres_log_databases_temp'::NAME, 'grafana'::NAME);
SELECT has_table ( 'stats', 'autovacuum'::NAME );
SELECT table_owner_is ( 'stats', 'autovacuum'::NAME, 'grafana'::NAME);
SELECT has_table ( 'stats', 'autovacuum_count'::NAME );
SELECT table_owner_is ( 'stats', 'autovacuum_count'::NAME, 'grafana'::NAME);
SELECT has_table ( 'stats', 'autovacuum_thresholds'::NAME );
SELECT table_owner_is ( 'stats', 'autovacuum_thresholds'::NAME, 'grafana'::NAME);
SELECT has_table ( 'stats', 'custom_table_settings'::NAME );
SELECT table_owner_is ( 'stats', 'custom_table_settings'::NAME, 'grafana'::NAME);
SELECT has_table ( 'stats', 'granted_locks'::NAME );
SELECT table_owner_is ( 'stats', 'granted_locks'::NAME, 'grafana'::NAME);
SELECT has_table ( 'stats', 'pg_database'::NAME );
SELECT table_owner_is ( 'stats', 'pg_database'::NAME, 'grafana'::NAME);
SELECT has_table ( 'stats', 'pg_settings'::NAME );
SELECT table_owner_is ( 'stats', 'pg_settings'::NAME, 'grafana'::NAME);
SELECT has_table ( 'stats', 'pg_stat_activity'::NAME );
SELECT table_owner_is ( 'stats', 'pg_stat_activity'::NAME, 'grafana'::NAME);
SELECT has_table ( 'stats', 'replication_status'::NAME );
SELECT table_owner_is ( 'stats', 'replication_status'::NAME, 'grafana'::NAME);
SELECT has_table ( 'stats', 'table_stats'::NAME );
SELECT table_owner_is ( 'stats', 'table_stats'::NAME, 'grafana'::NAME);
SELECT has_table ( 'tools', 'build_items'::NAME );
SELECT table_owner_is ( 'tools', 'build_items'::NAME, 'grafana'::NAME);
SELECT has_table ( 'tools', 'hypertables'::NAME );
SELECT table_owner_is ( 'tools', 'hypertables'::NAME, 'grafana'::NAME);
SELECT has_table ( 'tools', 'queries_disabled'::NAME );
SELECT table_owner_is ( 'tools', 'queries_disabled'::NAME, 'grafana'::NAME);
SELECT has_table ( 'tools', 'query'::NAME );
SELECT table_owner_is ( 'tools', 'query'::NAME, 'grafana'::NAME);
SELECT has_table ( 'tools', 'servers'::NAME );
SELECT table_owner_is ( 'tools', 'servers'::NAME, 'grafana'::NAME);
SELECT has_table ( 'tools', 'version'::NAME );
SELECT table_owner_is ( 'tools', 'version'::NAME, 'grafana'::NAME);

SELECT diag('=================================');
SELECT diag('View Tests');
SELECT has_view ( 'logs', 'autovacuum_length'::NAME, 'View logs.autovacuum_length should exist' );
SELECT view_owner_is ( 'logs', 'autovacuum_length'::NAME, 'grafana'::NAME);
SELECT has_view ( 'logs', 'databases'::NAME, 'View logs.databases should exist' );
SELECT view_owner_is ( 'logs', 'databases'::NAME, 'grafana'::NAME);
SELECT has_view ( 'logs', 'hypertable'::NAME, 'View logs.hypertable should exist' );
SELECT view_owner_is ( 'logs', 'hypertable'::NAME, 'grafana'::NAME);
SELECT has_view ( 'logs', 'last_log_entries'::NAME, 'View logs.last_log_entries should exist' );
SELECT view_owner_is ( 'logs', 'last_log_entries'::NAME, 'grafana'::NAME);
SELECT has_view ( 'tools', 'pg_major_version'::NAME, 'View tools.pg_major_version should exist' );
SELECT view_owner_is ( 'tools', 'pg_major_version'::NAME, 'grafana'::NAME);
SELECT has_view ( 'tools', 'table_size'::NAME, 'View tools.table_size should exist' );
SELECT view_owner_is ( 'tools', 'table_size'::NAME, 'grafana'::NAME);

SELECT diag('=================================');
SELECT diag('Function Tests');
SELECT has_function ( 'tools', 'postgres_log_trigger'::NAME );
SELECT function_owner_is ( 'tools', 'postgres_log_trigger'::NAME, '{}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'create_logs'::NAME );
SELECT function_owner_is ( 'tools', 'create_logs'::NAME, '{}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'create_server_database_inherits'::NAME, 'text,text' );
SELECT function_owner_is ( 'tools', 'create_server_database_inherits'::NAME, '{text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'create_server_inherits'::NAME, 'text' );
SELECT function_owner_is ( 'tools', 'create_server_inherits'::NAME, '{text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'delete_logs'::NAME );
SELECT function_owner_is ( 'tools', 'delete_logs'::NAME, '{}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'field_list_check'::NAME, 'text,text' );
SELECT function_owner_is ( 'tools', 'field_list_check'::NAME, '{text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'connection_attempt_history'::NAME, 'text,text,text[],text,text,boolean,boolean' );
SELECT function_owner_is ( 'logs', 'connection_attempt_history'::NAME, '{text,text,text[],text,text,boolean,boolean}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'connection_history'::NAME, 'text,text,text[],text,text,boolean,boolean' );
SELECT function_owner_is ( 'logs', 'connection_history'::NAME, '{text,text,text[],text,text,boolean,boolean}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'generate_timestamps'::NAME, 'text,text' );
SELECT function_owner_is ( 'tools', 'generate_timestamps'::NAME, '{text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'group_by_interval'::NAME, 'text,text' );
SELECT function_owner_is ( 'tools', 'group_by_interval'::NAME, '{text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'interval_to_field'::NAME, 'text' );
SELECT function_owner_is ( 'tools', 'interval_to_field'::NAME, '{text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'parse_csv'::NAME, 'text,boolean' );
SELECT function_owner_is ( 'tools', 'parse_csv'::NAME, '{text,boolean}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autoanalyze_log'::NAME, 'text,text,text,text,text,bigint' );
SELECT function_owner_is ( 'logs', 'autoanalyze_log'::NAME, '{text,text,text,text,text,bigint}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autoanalyze_log_count'::NAME, 'text,text,timestamp with time zone,timestamp with time zone,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autoanalyze_log_count'::NAME, '{text,text,timestamp with time zone,timestamp with time zone,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autoanalyze_log_count_chart'::NAME, 'text,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autoanalyze_log_count_chart'::NAME, '{text,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_autoanalyze_count'::NAME, 'text,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_autoanalyze_count'::NAME, '{text,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'error_history'::NAME, 'text,text,text[],text,text,boolean' );
SELECT function_owner_is ( 'logs', 'error_history'::NAME, '{text,text,text[],text,text,boolean}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'fatal_history'::NAME, 'text,text,text[],text,text,boolean' );
SELECT function_owner_is ( 'logs', 'fatal_history'::NAME, '{text,text,text[],text,text,boolean}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_log'::NAME, 'text,text,text,text,text,bigint' );
SELECT function_owner_is ( 'logs', 'autovacuum_log'::NAME, '{text,text,text,text,text,bigint}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_log_count'::NAME, 'text,text,timestamp with time zone,timestamp with time zone,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_log_count'::NAME, '{text,text,timestamp with time zone,timestamp with time zone,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_log_count_chart'::NAME, 'text,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_log_count_chart'::NAME, '{text,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_log_removed_size'::NAME, 'text,text,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_log_removed_size'::NAME, '{text,text,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_log_removed_space_chart'::NAME, 'text,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_log_removed_space_chart'::NAME, '{text,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_log_tuples_removed'::NAME, 'text,text,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_log_tuples_removed'::NAME, '{text,text,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_log_tuples_removed_chart'::NAME, 'text,text,text,text,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_log_tuples_removed_chart'::NAME, '{text,text,text,text,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'autovacuum_thresholds'::NAME, 'text,text,text,timestamp with time zone,text' );
SELECT function_owner_is ( 'logs', 'autovacuum_thresholds'::NAME, '{text,text,text,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'checkpoint_buffers'::NAME, 'text,text,timestamp with time zone,timestamp with time zone,text' );
SELECT function_owner_is ( 'logs', 'checkpoint_buffers'::NAME, '{text,text,timestamp with time zone,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'checkpoint_files'::NAME, 'text,text,timestamp with time zone,timestamp with time zone,text' );
SELECT function_owner_is ( 'logs', 'checkpoint_files'::NAME, '{text,text,timestamp with time zone,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'checkpoint_logs'::NAME, 'text,text,bigint' );
SELECT function_owner_is ( 'logs', 'checkpoint_logs'::NAME, '{text,text,bigint}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'checkpoint_wal_file_usage'::NAME, 'text,text,timestamp with time zone,timestamp with time zone,text' );
SELECT function_owner_is ( 'logs', 'checkpoint_wal_file_usage'::NAME, '{text,text,timestamp with time zone,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'checkpoint_warning_logs'::NAME, 'text,text,bigint' );
SELECT function_owner_is ( 'logs', 'checkpoint_warning_logs'::NAME, '{text,text,bigint}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'stats', 'vacuum_settings'::NAME, 'text,text,timestamp with time zone,text' );
SELECT function_owner_is ( 'stats', 'vacuum_settings'::NAME, '{text,text,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'custom_table_settings'::NAME, 'text,text,timestamp with time zone,text' );
SELECT function_owner_is ( 'logs', 'custom_table_settings'::NAME, '{text,text,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'checkpoint_warning_logs_count'::NAME, 'text,text,timestamp with time zone,timestamp with time zone,text' );
SELECT function_owner_is ( 'logs', 'checkpoint_warning_logs_count'::NAME, '{text,text,timestamp with time zone,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'checkpoint_write_buffers'::NAME, 'text,text,timestamp with time zone,timestamp with time zone,text' );
SELECT function_owner_is ( 'logs', 'checkpoint_write_buffers'::NAME, '{text,text,timestamp with time zone,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'stats', 'autovacuum'::NAME, 'text,text,text,timestamp without time zone,text' );
SELECT function_owner_is ( 'stats', 'autovacuum'::NAME, '{text,text,text,timestamp without time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'stats', 'pg_stat_activity_active'::NAME, 'text,text,timestamp with time zone,text' );
SELECT function_owner_is ( 'stats', 'pg_stat_activity_active'::NAME, '{text,text,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'stats', 'granted_locks'::NAME, 'text,text,timestamp with time zone,text' );
SELECT function_owner_is ( 'stats', 'granted_locks'::NAME, '{text,text,timestamp with time zone,text}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'ldap_error_history'::NAME, 'text,text,text[],text,text,boolean' );
SELECT function_owner_is ( 'logs', 'ldap_error_history'::NAME, '{text,text,text[],text,text,boolean}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'logs', 'update_pg_log_databases'::NAME );
SELECT function_owner_is ( 'logs', 'update_pg_log_databases'::NAME, '{}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'timescaledb_enterprise'::NAME );
SELECT function_owner_is ( 'tools', 'timescaledb_enterprise'::NAME, '{}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'timescaledb_drop_chunks'::NAME );
SELECT function_owner_is ( 'tools', 'timescaledb_drop_chunks'::NAME, '{}'::regtype[]::name[], 'grafana'::NAME);
SELECT has_function ( 'tools', 'generate_pgtap'::NAME );
SELECT function_owner_is ( 'tools', 'generate_pgtap'::NAME, '{}'::regtype[]::name[], 'postgres'::NAME);
