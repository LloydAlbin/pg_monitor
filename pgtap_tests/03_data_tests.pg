\connect pgmonitor_db

-- Setup Test Variables
\set test_name 'data'
\set test_user 'grafana'
\set test_production_database 'pgmonitor_db'
\set plan 22

-- Install pgTAP, show diagnostics, and start common tests
--\ir ../common/diagnostic.sql
\i common/diagnostics.pg

SELECT diag('SET TIME ZONE PST8PDT');
SET TIME ZONE 'PST8PDT';

SELECT diag('=================================');
SELECT diag('Test logs.connection_attempt_history()');

SELECT results_eq(
    E'SELECT * FROM logs.connection_attempt_history(''5s'', $$log_time BETWEEN ''2020-01-18T19:00:00'' AND ''2020-01-18T19:00:59''$$, ARRAY[''db1''], ''1s'', ''avg'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,1::bigint),
        ('2020-01-18 19:00:05-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:10-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:15-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:20-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:25-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:30-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:35-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:40-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:45-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:50-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:55-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint)
    $$,'Verify Data from function logs.connection_attempt_history - 1s avg to 5s');

SELECT results_eq(
    E'SELECT * FROM logs.connection_attempt_history(''1s'', $$log_time BETWEEN ''2020-01-18T19:00:00'' AND ''2020-01-18T19:00:11''$$, ARRAY[''db1''], ''1s'', ''avg'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,1::bigint),
        ('2020-01-18 19:00:01-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:02-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:03-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:04-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:05-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:06-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:07-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:08-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:09-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:10-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:11-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint)
    $$,'Verify Data from function logs.connection_attempt_history - 1s avg to 1s');

SELECT results_eq(
    E'SELECT * FROM logs.connection_attempt_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00'' AND ''2020-01-18T19:59:59''$$, ARRAY[''db1''], ''15m'', ''min'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,1::bigint)
    $$,'Verify Data from function logs.connection_attempt_history - 15m min to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_attempt_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00'' AND ''2020-01-18T19:59:59''$$, ARRAY[''db1''], ''15m'', ''max'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,3::bigint)
    $$,'Verify Data from function logs.connection_attempt_history - 15m max to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_attempt_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00'' AND ''2020-01-18T19:59:59''$$, ARRAY[''db1''], ''15m'', ''avg'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,2::bigint)
    $$,'Verify Data from function logs.connection_attempt_history - 15m avg to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_attempt_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00'' AND ''2020-01-18T19:59:59''$$, ARRAY[''db1''], ''15m'', ''sum'', True);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1 - 1h Inverval'::text,5::bigint)
    $$,'Verify Data from function logs.connection_attempt_history - 15m sum to 1h with Interrval Display');

SELECT results_eq(
    E'SELECT * FROM logs.connection_attempt_history(''15m'', $$log_time BETWEEN ''2020-01-18T19:00:00'' AND ''2020-01-18T19:59:59''$$, ARRAY[''db1''], ''1h'', ''sum'', True, true);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1 - 15m Inverval - sum'::text,5::bigint)
    $$,'Verify Data from function logs.connection_attempt_history - 1h sum to 15m with Interval Display and Agregate Display');

SELECT diag('=================================');
SELECT diag('Test logs.connection_history()');

SELECT results_eq(
    E'SELECT * FROM logs.connection_history(''5s'', $$log_time BETWEEN ''2020-01-18T19:00:00'' AND ''2020-01-18T19:00:59''$$, ARRAY[''db1''], ''1s'', ''avg'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,1::bigint),
        ('2020-01-18 19:00:05-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:10-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:15-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:20-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:25-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:30-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:35-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:40-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:45-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:50-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:55-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint)
    $$,'Verify Data from function logs.connection_history - 1s avg to 5s');

SELECT results_eq(
    E'SELECT * FROM logs.connection_history(''1s'', $$log_time BETWEEN ''2020-01-18T19:00:00'' AND ''2020-01-18T19:00:11''$$, ARRAY[''db1''], ''1s'', ''avg'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,1::bigint),
        ('2020-01-18 19:00:01-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:02-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:03-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:04-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:05-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:06-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:07-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:08-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:09-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:10-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:11-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint)
    $$,'Verify Data from function logs.connection_history - 1s avg to 1s');

SELECT results_eq(
    E'SELECT * FROM logs.connection_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00'' AND ''2020-01-18T19:59:59''$$, ARRAY[''db1''], ''15m'', ''min'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,1::bigint)
    $$,'Verify Data from function logs.connection_history - 15m min to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00'' AND ''2020-01-18T19:59:59''$$, ARRAY[''db1''], ''15m'', ''max'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,3::bigint)
    $$,'Verify Data from function logs.connection_history - 15m max to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00'' AND ''2020-01-18T19:59:59''$$, ARRAY[''db1''], ''15m'', ''avg'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,2::bigint)
    $$,'Verify Data from function logs.connection_history - 15m avg to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00'' AND ''2020-01-18T19:59:59''$$, ARRAY[''db1''], ''15m'', ''sum'', True);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1 - 1h Inverval'::text,5::bigint)
    $$,'Verify Data from function logs.connection_history - 15m sum to 1h with Interrval Display');

SELECT results_eq(
    E'SELECT * FROM logs.connection_history(''15m'', $$log_time BETWEEN ''2020-01-18T19:00:00'' AND ''2020-01-18T19:59:59''$$, ARRAY[''db1''], ''1h'', ''sum'', True, true);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1 - 15m Inverval - sum'::text,5::bigint)
    $$,'Verify Data from function logs.connection_history - 1h sum to 15m with Interval Display and Agregate Display');

SELECT diag('=================================');
SELECT diag('Test logs.ldap_error_history()');

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''15m'', $$log_time BETWEEN ''2020-01-13T15:00:00'' AND ''2020-01-13T16:59:59''$$, ARRAY[''db1'',''db2''], ''1s'', ''sum'', False);',
    $$VALUES
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint),
        ('2020-01-13 15:15:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:15:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 3::bigint),
        ('2020-01-13 15:15:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint),
        ('2020-01-13 15:30:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:30:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 1::bigint),
        ('2020-01-13 15:30:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint),
        ('2020-01-13 15:45:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:45:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 15:45:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint),
        ('2020-01-13 16:15:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 16:15:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:15:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint),
        ('2020-01-13 16:30:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 16:30:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:30:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint),
        ('2020-01-13 16:45:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 16:45:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:45:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 1s sum to 15m');

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''1h'', $$log_time BETWEEN ''2020-01-13T15:00:00'' AND ''2020-01-13T16:59:59''$$, ARRAY[''db1'',''db2''], ''1s'', ''sum'', False);',
    $$VALUES
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 4::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 1s sum to 1h');

SELECT todo( 'This test will fail until the bug #1645 is fixed in TimescaleDB', 1 );
-- https://github.com/timescale/timescaledb/issues/1645

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''1d'', $$log_time BETWEEN ''2020-01-13T15:00:00'' AND ''2020-01-13T16:59:59''$$, ARRAY[''db1'',''db2''], ''1s'', ''sum'', False);',
    $$VALUES
        ('2020-01-13 00:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 00:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 4::bigint),
        ('2020-01-13 00:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 1s sum to 1d');

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''5h'', $$log_time BETWEEN ''2020-01-13T15:00:00'' AND ''2020-01-13T16:59:59''$$, ARRAY[''db1'',''db2''], ''1s'', ''sum'', False);',
    $$VALUES
        ('2020-01-13 12:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 12:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 4::bigint),
        ('2020-01-13 12:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 1s sum to 5h');

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''1h'', $$log_time BETWEEN ''2020-01-13T15:00:00'' AND ''2020-01-13T16:59:59''$$, ARRAY[''db1'',''db2''], ''15m'', ''sum'', False);',
    $$VALUES
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 4::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 15m sum to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''1h'', $$log_time BETWEEN ''2020-01-13T15:00:00'' AND ''2020-01-13T16:59:59''$$, ARRAY[''db1'',''db2''], ''15m'', ''min'', False);',
    $$VALUES
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 1::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 15m min to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''1h'', $$log_time BETWEEN ''2020-01-13T15:00:00'' AND ''2020-01-13T16:59:59''$$, ARRAY[''db1'',''db2''], ''15m'', ''max'', False);',
    $$VALUES
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 3::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 15m max to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''1h'', $$log_time BETWEEN ''2020-01-13T15:00:00'' AND ''2020-01-13T16:59:59''$$, ARRAY[''db1'',''db2''], ''15m'', ''avg'', False);',
    $$VALUES
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 2::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 15m avg to 1h');

/*
-- WRONG RESULTS
pgmonitor_db=# SELECT * FROM logs.ldap_error_history('1d', $$log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59'$$, ARRAY['db1','db2'], '1s', 'sum', False);
NOTICE:  SQL: SELECT time_bucket_gapfill(CASE WHEN '1d'::interval >= '1s'::interval THEN '1d'::interval ELSE '1s'::interval END, log_time) AS "Time", CASE WHEN array_length('{db1,db2}'::text[], 1) > 1 THEN cluster_name || ' - ' ELSE '' END || CASE WHEN message LIKE E'%Can''t contact LDAP server' THEN trim(split_part(message, '"', 1)) ELSE trim(split_part(message, ':', 2)) END AS ldap_error, COALESCE(count(*),0) AS "Errors" FROM logs.postgres_log WHERE ARRAY[cluster_name] <@ '{db1,db2}'::text[] AND (message LIKE 'LDAP login failed for user%' OR message LIKE E'%Can''t contact LDAP server') AND log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59' GROUP BY "Time",ldap_error ORDER BY "Time",ldap_error 
          time          |              LDAP Errors               | Errors 
------------------------+----------------------------------------+--------
 2020-01-12 16:00:00-08 | db1 - Invalid credentials              |      0
 2020-01-12 16:00:00-08 | db1 - LDAP login failed for user       |      3
 2020-01-12 16:00:00-08 | db1 - could not search LDAP for filter |      1
 2020-01-13 16:00:00-08 | db1 - Invalid credentials              |      1
 2020-01-13 16:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-13 16:00:00-08 | db1 - could not search LDAP for filter |      0
(6 rows)

pgmonitor_db=# SELECT * FROM logs.ldap_error_history('1d', $$log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59'$$, ARRAY['db1','db2'], '1s', 'max', False);
NOTICE:  SQL: SELECT time_bucket(CASE WHEN '1d'::interval >= '1s'::interval THEN '1d'::interval ELSE '1s'::interval END, "Time1") AS "Time", ldap_error, COALESCE(max("Errors1"),0)::BIGINT AS "Errors" FROM ( SELECT time_bucket_gapfill('1s', log_time) AS "Time1", CASE WHEN array_length('{db1,db2}'::text[], 1) > 1 THEN cluster_name || ' - ' ELSE '' END || CASE WHEN message LIKE E'%Can''t contact LDAP server' THEN trim(split_part(message, '"', 1)) ELSE trim(split_part(message, ':', 2)) END AS ldap_error, count(*) AS "Errors1" FROM logs.postgres_log WHERE ARRAY[cluster_name] <@ '{db1,db2}'::text[] AND (message LIKE 'LDAP login failed for user%' OR message LIKE E'%Can''t contact LDAP server') AND log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59' GROUP BY "Time1",ldap_error ORDER BY "Time1",ldap_error ) a GROUP BY "Time",ldap_error ORDER BY "Time",ldap_error;
          time          |              LDAP Errors               | Errors 
------------------------+----------------------------------------+--------
 2020-01-12 16:00:00-08 | db1 - Invalid credentials              |      0
 2020-01-12 16:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-12 16:00:00-08 | db1 - could not search LDAP for filter |      1
 2020-01-13 16:00:00-08 | db1 - Invalid credentials              |      1
 2020-01-13 16:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-13 16:00:00-08 | db1 - could not search LDAP for filter |      0
(6 rows)

pgmonitor_db=# SELECT * FROM logs.ldap_error_history('1d', $$log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59'$$, ARRAY['db1','db2'], '1s', 'min', False);
NOTICE:  SQL: SELECT time_bucket(CASE WHEN '1d'::interval >= '1s'::interval THEN '1d'::interval ELSE '1s'::interval END, "Time1") AS "Time", ldap_error, COALESCE(min("Errors1"),0)::BIGINT AS "Errors" FROM ( SELECT time_bucket_gapfill('1s', log_time) AS "Time1", CASE WHEN array_length('{db1,db2}'::text[], 1) > 1 THEN cluster_name || ' - ' ELSE '' END || CASE WHEN message LIKE E'%Can''t contact LDAP server' THEN trim(split_part(message, '"', 1)) ELSE trim(split_part(message, ':', 2)) END AS ldap_error, count(*) AS "Errors1" FROM logs.postgres_log WHERE ARRAY[cluster_name] <@ '{db1,db2}'::text[] AND (message LIKE 'LDAP login failed for user%' OR message LIKE E'%Can''t contact LDAP server') AND log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59' GROUP BY "Time1",ldap_error ORDER BY "Time1",ldap_error ) a GROUP BY "Time",ldap_error ORDER BY "Time",ldap_error;
          time          |              LDAP Errors               | Errors 
------------------------+----------------------------------------+--------
 2020-01-12 16:00:00-08 | db1 - Invalid credentials              |      0
 2020-01-12 16:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-12 16:00:00-08 | db1 - could not search LDAP for filter |      1
 2020-01-13 16:00:00-08 | db1 - Invalid credentials              |      1
 2020-01-13 16:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-13 16:00:00-08 | db1 - could not search LDAP for filter |      0
(6 rows)

pgmonitor_db=# SELECT * FROM logs.ldap_error_history('1d', $$log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59'$$, ARRAY['db1','db2'], '1s', 'avg', False);
NOTICE:  SQL: SELECT time_bucket(CASE WHEN '1d'::interval >= '1s'::interval THEN '1d'::interval ELSE '1s'::interval END, "Time1") AS "Time", ldap_error, COALESCE(avg("Errors1"),0)::BIGINT AS "Errors" FROM ( SELECT time_bucket_gapfill('1s', log_time) AS "Time1", CASE WHEN array_length('{db1,db2}'::text[], 1) > 1 THEN cluster_name || ' - ' ELSE '' END || CASE WHEN message LIKE E'%Can''t contact LDAP server' THEN trim(split_part(message, '"', 1)) ELSE trim(split_part(message, ':', 2)) END AS ldap_error, count(*) AS "Errors1" FROM logs.postgres_log WHERE ARRAY[cluster_name] <@ '{db1,db2}'::text[] AND (message LIKE 'LDAP login failed for user%' OR message LIKE E'%Can''t contact LDAP server') AND log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59' GROUP BY "Time1",ldap_error ORDER BY "Time1",ldap_error ) a GROUP BY "Time",ldap_error ORDER BY "Time",ldap_error;
          time          |              LDAP Errors               | Errors 
------------------------+----------------------------------------+--------
 2020-01-12 16:00:00-08 | db1 - Invalid credentials              |      0
 2020-01-12 16:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-12 16:00:00-08 | db1 - could not search LDAP for filter |      1
 2020-01-13 16:00:00-08 | db1 - Invalid credentials              |      1
 2020-01-13 16:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-13 16:00:00-08 | db1 - could not search LDAP for filter |      0
(6 rows)

pgmonitor_db=# SELECT * FROM logs.ldap_error_history('1h', $$log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59'$$, ARRAY['db1','db2'], '1s', 'max', False);
NOTICE:  SQL: SELECT time_bucket(CASE WHEN '1h'::interval >= '1s'::interval THEN '1h'::interval ELSE '1s'::interval END, "Time1") AS "Time", ldap_error, COALESCE(max("Errors1"),0)::BIGINT AS "Errors" FROM ( SELECT time_bucket_gapfill('1s', log_time) AS "Time1", CASE WHEN array_length('{db1,db2}'::text[], 1) > 1 THEN cluster_name || ' - ' ELSE '' END || CASE WHEN message LIKE E'%Can''t contact LDAP server' THEN trim(split_part(message, '"', 1)) ELSE trim(split_part(message, ':', 2)) END AS ldap_error, count(*) AS "Errors1" FROM logs.postgres_log WHERE ARRAY[cluster_name] <@ '{db1,db2}'::text[] AND (message LIKE 'LDAP login failed for user%' OR message LIKE E'%Can''t contact LDAP server') AND log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59' GROUP BY "Time1",ldap_error ORDER BY "Time1",ldap_error ) a GROUP BY "Time",ldap_error ORDER BY "Time",ldap_error;
          time          |              LDAP Errors               | Errors 
------------------------+----------------------------------------+--------
 2020-01-13 15:00:00-08 | db1 - Invalid credentials              |      0
 2020-01-13 15:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-13 15:00:00-08 | db1 - could not search LDAP for filter |      1
 2020-01-13 16:00:00-08 | db1 - Invalid credentials              |      1
 2020-01-13 16:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-13 16:00:00-08 | db1 - could not search LDAP for filter |      0
(6 rows)

pgmonitor_db=# SELECT * FROM logs.ldap_error_history('1h', $$log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59'$$, ARRAY['db1','db2'], '1s', 'min', False);
NOTICE:  SQL: SELECT time_bucket(CASE WHEN '1h'::interval >= '1s'::interval THEN '1h'::interval ELSE '1s'::interval END, "Time1") AS "Time", ldap_error, COALESCE(min("Errors1"),0)::BIGINT AS "Errors" FROM ( SELECT time_bucket_gapfill('1s', log_time) AS "Time1", CASE WHEN array_length('{db1,db2}'::text[], 1) > 1 THEN cluster_name || ' - ' ELSE '' END || CASE WHEN message LIKE E'%Can''t contact LDAP server' THEN trim(split_part(message, '"', 1)) ELSE trim(split_part(message, ':', 2)) END AS ldap_error, count(*) AS "Errors1" FROM logs.postgres_log WHERE ARRAY[cluster_name] <@ '{db1,db2}'::text[] AND (message LIKE 'LDAP login failed for user%' OR message LIKE E'%Can''t contact LDAP server') AND log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59' GROUP BY "Time1",ldap_error ORDER BY "Time1",ldap_error ) a GROUP BY "Time",ldap_error ORDER BY "Time",ldap_error;
          time          |              LDAP Errors               | Errors 
------------------------+----------------------------------------+--------
 2020-01-13 15:00:00-08 | db1 - Invalid credentials              |      0
 2020-01-13 15:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-13 15:00:00-08 | db1 - could not search LDAP for filter |      1
 2020-01-13 16:00:00-08 | db1 - Invalid credentials              |      1
 2020-01-13 16:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-13 16:00:00-08 | db1 - could not search LDAP for filter |      0
(6 rows)

pgmonitor_db=# SELECT * FROM logs.ldap_error_history('1h', $$log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59'$$, ARRAY['db1','db2'], '1s', 'sum', False);
NOTICE:  SQL: SELECT time_bucket_gapfill(CASE WHEN '1h'::interval >= '1s'::interval THEN '1h'::interval ELSE '1s'::interval END, log_time) AS "Time", CASE WHEN array_length('{db1,db2}'::text[], 1) > 1 THEN cluster_name || ' - ' ELSE '' END || CASE WHEN message LIKE E'%Can''t contact LDAP server' THEN trim(split_part(message, '"', 1)) ELSE trim(split_part(message, ':', 2)) END AS ldap_error, COALESCE(count(*),0) AS "Errors" FROM logs.postgres_log WHERE ARRAY[cluster_name] <@ '{db1,db2}'::text[] AND (message LIKE 'LDAP login failed for user%' OR message LIKE E'%Can''t contact LDAP server') AND log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59' GROUP BY "Time",ldap_error ORDER BY "Time",ldap_error 
          time          |              LDAP Errors               | Errors 
------------------------+----------------------------------------+--------
 2020-01-13 15:00:00-08 | db1 - Invalid credentials              |      0
 2020-01-13 15:00:00-08 | db1 - LDAP login failed for user       |      3
 2020-01-13 15:00:00-08 | db1 - could not search LDAP for filter |      1
 2020-01-13 16:00:00-08 | db1 - Invalid credentials              |      1
 2020-01-13 16:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-13 16:00:00-08 | db1 - could not search LDAP for filter |      0
(6 rows)

pgmonitor_db=# SELECT * FROM logs.ldap_error_history('1h', $$log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59'$$, ARRAY['db1','db2'], '1s', 'avg', False);
NOTICE:  SQL: SELECT time_bucket(CASE WHEN '1h'::interval >= '1s'::interval THEN '1h'::interval ELSE '1s'::interval END, "Time1") AS "Time", ldap_error, COALESCE(avg("Errors1"),0)::BIGINT AS "Errors" FROM ( SELECT time_bucket_gapfill('1s', log_time) AS "Time1", CASE WHEN array_length('{db1,db2}'::text[], 1) > 1 THEN cluster_name || ' - ' ELSE '' END || CASE WHEN message LIKE E'%Can''t contact LDAP server' THEN trim(split_part(message, '"', 1)) ELSE trim(split_part(message, ':', 2)) END AS ldap_error, count(*) AS "Errors1" FROM logs.postgres_log WHERE ARRAY[cluster_name] <@ '{db1,db2}'::text[] AND (message LIKE 'LDAP login failed for user%' OR message LIKE E'%Can''t contact LDAP server') AND log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59' GROUP BY "Time1",ldap_error ORDER BY "Time1",ldap_error ) a GROUP BY "Time",ldap_error ORDER BY "Time",ldap_error;
          time          |              LDAP Errors               | Errors 
------------------------+----------------------------------------+--------
 2020-01-13 15:00:00-08 | db1 - Invalid credentials              |      0
 2020-01-13 15:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-13 15:00:00-08 | db1 - could not search LDAP for filter |      1
 2020-01-13 16:00:00-08 | db1 - Invalid credentials              |      1
 2020-01-13 16:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-13 16:00:00-08 | db1 - could not search LDAP for filter |      0
(6 rows)


-- BUG RESULTS, NEED TO TEST FOR THESE BAD RESULTS

pgmonitor_db=# SELECT * FROM logs.ldap_error_history('4h', $$log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59'$$, ARRAY['db1','db2'], '1s', 'avg', False);
NOTICE:  SQL: SELECT time_bucket(CASE WHEN '4h'::interval >= '1s'::interval THEN '4h'::interval ELSE '1s'::interval END, "Time1") AS "Time", ldap_error, COALESCE(avg("Errors1"),0)::BIGINT AS "Errors" FROM ( SELECT time_bucket_gapfill('1s', log_time) AS "Time1", CASE WHEN array_length('{db1,db2}'::text[], 1) > 1 THEN cluster_name || ' - ' ELSE '' END || CASE WHEN message LIKE E'%Can''t contact LDAP server' THEN trim(split_part(message, '"', 1)) ELSE trim(split_part(message, ':', 2)) END AS ldap_error, count(*) AS "Errors1" FROM logs.postgres_log WHERE ARRAY[cluster_name] <@ '{db1,db2}'::text[] AND (message LIKE 'LDAP login failed for user%' OR message LIKE E'%Can''t contact LDAP server') AND log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59' GROUP BY "Time1",ldap_error ORDER BY "Time1",ldap_error ) a GROUP BY "Time",ldap_error ORDER BY "Time",ldap_error;
          time          |              LDAP Errors               | Errors 
------------------------+----------------------------------------+--------
 2020-01-13 12:00:00-08 | db1 - Invalid credentials              |      0
 2020-01-13 12:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-13 12:00:00-08 | db1 - could not search LDAP for filter |      1
 2020-01-13 16:00:00-08 | db1 - Invalid credentials              |      1
 2020-01-13 16:00:00-08 | db1 - LDAP login failed for user       |      1
 2020-01-13 16:00:00-08 | db1 - could not search LDAP for filter |      0
(6 rows)


pgmonitor_db=# SELECT * FROM logs.ldap_error_history('5h', $$log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59'$$, ARRAY['db1','db2'], '1s', 'sum', False);
NOTICE:  SQL: SELECT time_bucket_gapfill(CASE WHEN '5h'::interval >= '1s'::interval THEN '5h'::interval ELSE '1s'::interval END, log_time) AS "Time", CASE WHEN array_length('{db1,db2}'::text[], 1) > 1 THEN cluster_name || ' - ' ELSE '' END || CASE WHEN message LIKE E'%Can''t contact LDAP server' THEN trim(split_part(message, '"', 1)) ELSE trim(split_part(message, ':', 2)) END AS ldap_error, COALESCE(count(*),0) AS "Errors" FROM logs.postgres_log WHERE ARRAY[cluster_name] <@ '{db1,db2}'::text[] AND (message LIKE 'LDAP login failed for user%' OR message LIKE E'%Can''t contact LDAP server') AND log_time BETWEEN '2020-01-13T15:00:00' AND '2020-01-13T16:59:59' GROUP BY "Time",ldap_error ORDER BY "Time",ldap_error 
          time          |              LDAP Errors               | Errors 
------------------------+----------------------------------------+--------
 2020-01-13 12:00:00-08 | db1 - Invalid credentials              |      1
 2020-01-13 12:00:00-08 | db1 - LDAP login failed for user       |      4
 2020-01-13 12:00:00-08 | db1 - could not search LDAP for filter |      1
(3 rows)

*/