\connect pgmonitor_db

-- Setup Test Variables
\set test_name 'data'
\set test_user 'grafana'
\set test_production_database 'pgmonitor_db'
\set plan 117

-- Install pgTAP, show diagnostics, and start common tests
--\ir ../common/diagnostic.sql
\i common/diagnostics.pg

/*
-- Need for TimescaleDB 1.7.4 and older
SELECT diag('');
SELECT diag('Sleep until materialized views are finished being refreshed.');
DO $$
DECLARE
	r RECORD;
    rcheck RECORD;
BEGIN
    SELECT tools.check_timescaledb_version('2.0.0-beta1') AS check INTO rcheck;
    IF rcheck.check IS TRUE THEN 
        -- 2.0.0-beta1 and newer
    ELSE
        -- Older than 2.0.0-beta1
        LOOP
            SELECT * INTO r FROM timescaledb_information.continuous_aggregate_stats 
            WHERE (view_name::text LIKE 'logs.postgres_log_%'
            OR view_name::text LIKE 'logs.connection_%')
            AND (completed_threshold < '2020-01-18 19:56:01.401 PST' 
            OR completed_threshold IS NULL);
            IF NOT FOUND THEN
                EXIT;
            END IF;
            PERFORM pg_sleep(30); -- Sleep for 30 seconds and then re-test
        END LOOP;
    END IF;
END $$;
*/

SELECT diag('');
SELECT diag('Test logs.connection_attempt_history()');
SELECT diag('=================================');

SELECT results_eq(
    E'SELECT * FROM logs.connection_attempt_history(''5s'', $$log_time BETWEEN ''2020-01-18T19:00:00-08'' AND ''2020-01-18T19:00:59-08''$$, ARRAY[''db1''], ''1s'', ''avg'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,1::bigint),
        ('2020-01-18 19:00:05-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:10-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:15-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:20-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:25-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:30-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:35-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:40-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:45-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:50-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:55-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint)
    $$,'Verify Data from function logs.connection_attempt_history - 1s avg to 5s');

SELECT results_eq(
    E'SELECT * FROM logs.connection_attempt_history(''1s'', $$log_time BETWEEN ''2020-01-18T19:00:00-08'' AND ''2020-01-18T19:00:11-08''$$, ARRAY[''db1''], ''1s'', ''avg'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,1::bigint),
        ('2020-01-18 19:00:01-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:02-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:03-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:04-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:05-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:06-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:07-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:08-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:09-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:10-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:11-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint)
    $$,'Verify Data from function logs.connection_attempt_history - 1s avg to 1s');

SELECT results_eq(
    E'SELECT * FROM logs.connection_attempt_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00-08'' AND ''2020-01-18T19:59:59-08''$$, ARRAY[''db1''], ''15m'', ''min'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,1::bigint)
    $$,'Verify Data from function logs.connection_attempt_history - 15m min to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_attempt_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00-08'' AND ''2020-01-18T19:59:59-08''$$, ARRAY[''db1''], ''15m'', ''max'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,3::bigint)
    $$,'Verify Data from function logs.connection_attempt_history - 15m max to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_attempt_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00-08'' AND ''2020-01-18T19:59:59-08''$$, ARRAY[''db1''], ''15m'', ''avg'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,2::bigint)
    $$,'Verify Data from function logs.connection_attempt_history - 15m avg to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_attempt_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00-08'' AND ''2020-01-18T19:59:59-08''$$, ARRAY[''db1''], ''15m'', ''sum'', True);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1 - 1h Inverval'::text,5::bigint)
    $$,'Verify Data from function logs.connection_attempt_history - 15m sum to 1h with Interrval Display');

SELECT results_eq(
    E'SELECT * FROM logs.connection_attempt_history(''15m'', $$log_time BETWEEN ''2020-01-18T19:00:00-08'' AND ''2020-01-18T19:59:59-08''$$, ARRAY[''db1''], ''1h'', ''sum'', True, true);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1 - 15m Inverval - sum'::text,5::bigint)
    $$,'Verify Data from function logs.connection_attempt_history - 1h sum to 15m with Interval Display and Agregate Display');

SELECT diag('');
SELECT diag('Test logs.connection_history()');
SELECT diag('=================================');

SELECT results_eq(
    E'SELECT * FROM logs.connection_history(''5s'', $$log_time BETWEEN ''2020-01-18T19:00:00-08'' AND ''2020-01-18T19:00:59-08''$$, ARRAY[''db1''], ''1s'', ''avg'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,1::bigint),
        ('2020-01-18 19:00:05-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:10-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:15-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:20-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:25-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:30-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:35-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:40-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:45-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:50-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:55-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint)
    $$,'Verify Data from function logs.connection_history - 1s avg to 5s');

SELECT results_eq(
    E'SELECT * FROM logs.connection_history(''1s'', $$log_time BETWEEN ''2020-01-18T19:00:00-08'' AND ''2020-01-18T19:00:11-08''$$, ARRAY[''db1''], ''1s'', ''avg'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,1::bigint),
        ('2020-01-18 19:00:01-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:02-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:03-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:04-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:05-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:06-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:07-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:08-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:09-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:10-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint),
        ('2020-01-18 19:00:11-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,0::bigint)
    $$,'Verify Data from function logs.connection_history - 1s avg to 1s');

SELECT results_eq(
    E'SELECT * FROM logs.connection_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00-08'' AND ''2020-01-18T19:59:59-08''$$, ARRAY[''db1''], ''15m'', ''min'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,1::bigint)
    $$,'Verify Data from function logs.connection_history - 15m min to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00-08'' AND ''2020-01-18T19:59:59-08''$$, ARRAY[''db1''], ''15m'', ''max'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,3::bigint)
    $$,'Verify Data from function logs.connection_history - 15m max to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00-08'' AND ''2020-01-18T19:59:59-08''$$, ARRAY[''db1''], ''15m'', ''avg'', False);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,2::bigint)
    $$,'Verify Data from function logs.connection_history - 15m avg to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_history(''1h'', $$log_time BETWEEN ''2020-01-18T19:00:00-08'' AND ''2020-01-18T19:59:59-08''$$, ARRAY[''db1''], ''15m'', ''sum'', True);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1 - 1h Inverval'::text,5::bigint)
    $$,'Verify Data from function logs.connection_history - 15m sum to 1h with Interrval Display');

SELECT results_eq(
    E'SELECT * FROM logs.connection_history(''15m'', $$log_time BETWEEN ''2020-01-18T19:00:00-08'' AND ''2020-01-18T19:59:59-08''$$, ARRAY[''db1''], ''1h'', ''sum'', True, true);',
    $$VALUES
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1 - 15m Inverval - sum'::text,5::bigint)
    $$,'Verify Data from function logs.connection_history - 1h sum to 15m with Interval Display and Agregate Display');

SELECT diag('');
SELECT diag('Test logs.ldap_error_history()');
SELECT diag('=================================');

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''15m'', $$log_time BETWEEN ''2020-01-13T15:00:00-08'' AND ''2020-01-13T16:59:59-08''$$, ARRAY[''db1'',''db2''], ''1s'', ''sum'', False);',
    $$VALUES
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint),
        ('2020-01-13 15:15:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:15:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 3::bigint),
        ('2020-01-13 15:15:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint),
        ('2020-01-13 15:30:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:30:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 1::bigint),
        ('2020-01-13 15:30:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint),
        ('2020-01-13 15:45:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:45:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 15:45:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint),
        ('2020-01-13 16:15:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 16:15:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:15:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint),
        ('2020-01-13 16:30:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 16:30:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:30:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint),
        ('2020-01-13 16:45:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 16:45:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:45:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 1s sum to 15m');

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''1h'', $$log_time BETWEEN ''2020-01-13T15:00:00-08'' AND ''2020-01-13T16:59:59-08''$$, ARRAY[''db1'',''db2''], ''1s'', ''sum'', False);',
    $$VALUES
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 4::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 1s sum to 1h');

SELECT todo( 'This test will fail until the bug #1645 is fixed in TimescaleDB', 1 );
-- https://github.com/timescale/timescaledb/issues/1645

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''1d'', $$log_time BETWEEN ''2020-01-13T15:00:00-08'' AND ''2020-01-13T16:59:59-08''$$, ARRAY[''db1'',''db2''], ''1s'', ''sum'', False);',
    $$VALUES
        ('2020-01-13 00:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 00:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 4::bigint),
        ('2020-01-13 00:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 1s sum to 1d');

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''5h'', $$log_time BETWEEN ''2020-01-13T15:00:00-08'' AND ''2020-01-13T16:59:59-08''$$, ARRAY[''db1'',''db2''], ''1s'', ''sum'', False);',
    $$VALUES
        ('2020-01-13 12:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 12:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 4::bigint),
        ('2020-01-13 12:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 1s sum to 5h');

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''1h'', $$log_time BETWEEN ''2020-01-13T15:00:00-08'' AND ''2020-01-13T16:59:59-08''$$, ARRAY[''db1'',''db2''], ''15m'', ''sum'', False);',
    $$VALUES
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 4::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 15m sum to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''1h'', $$log_time BETWEEN ''2020-01-13T15:00:00-08'' AND ''2020-01-13T16:59:59-08''$$, ARRAY[''db1'',''db2''], ''15m'', ''min'', False);',
    $$VALUES
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 1::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 15m min to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''1h'', $$log_time BETWEEN ''2020-01-13T15:00:00-08'' AND ''2020-01-13T16:59:59-08''$$, ARRAY[''db1'',''db2''], ''15m'', ''max'', False);',
    $$VALUES
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 3::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 15m max to 1h');

SELECT results_eq(
    E'SELECT * FROM logs.ldap_error_history(''1h'', $$log_time BETWEEN ''2020-01-13T15:00:00-08'' AND ''2020-01-13T16:59:59-08''$$, ARRAY[''db1'',''db2''], ''15m'', ''avg'', False);',
    $$VALUES
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 0::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 2::bigint),
        ('2020-01-13 15:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - Invalid credentials'::text, 1::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - LDAP login failed for user'::text, 0::bigint),
        ('2020-01-13 16:00:00-08'::TIMESTAMP WITH TIME ZONE, 'db1 - could not search LDAP for filter'::text, 0::bigint)
    $$,'Verify Data from function logs.ldap_error_history - 15m avg to 1h');

SELECT diag('');
SELECT diag( 'The tools.time_bucket functions are for people who want to group by month, year, decade, centery, millenium. These functions will continue to be needed until the bug #414 is fixed in TimescaleDB' );
/*
I have added the tools.time_bucket function for people who want to group by month, year, decade, centery, millenium.
To use this function, just search and replace all instances of "public.time_bucket(" with "tools.time_bucket" within the init_timescaledb.sql file.
See TimescaleDB Issue #414
https://github.com/timescale/timescaledb/issues/414
*/

SELECT diag('');
SELECT diag('SET TIME ZONE PST8PDT');
SELECT diag('=================================');
SET TIME ZONE 'PST8PDT';

SELECT diag('');
SELECT diag('Test tools.time_bucket(interval, timestamptz, interval, timestamptz)');
SELECT diag('=================================');

SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1m''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-01-02 12:22:00-00'::TIMESTAMPTZ)
    $$,'Verify Data from function tools.time_bucket - 1m');

SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''15m''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-01-02 12:15:00-00'::TIMESTAMPTZ)
    $$,'Verify Data from function tools.time_bucket - 15m');

SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1h''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-01-02 12:00:00-00'::TIMESTAMPTZ)
    $$,'Verify Data from function tools.time_bucket - 1h');

SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1d''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-01-02 00:00:00-00'::TIMESTAMPTZ)
    $$,'Verify Data from function tools.time_bucket - 1d');

-- Note: Every 30 days starting on 1/1/1970
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''30d''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2019-12-19T00:00:00Z'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 30d');

-- Note: Every 45 days starting on 1/1/1970
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''30d''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2019-12-19T00:00:00Z'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 45d');

-- Note: months starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 month''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-01-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 1 month');

-- Note: months starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''2 months''::interval, ''2020-02-02T12:22:23''::timestamptz);',
    $$VALUES
        ('2020-01-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 2 months');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''.25 year''::interval, ''2020-10-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-10-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - .25 year (Quarter)');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''.5 year''::interval, ''2020-10-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-07-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - .5 year (Half Year)');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 year''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-01-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 1 year');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 year 6 months''::interval, ''2019-11-02 12:22:23 UTC''::timestamptz);',
    $$VALUES
        ('2018-07-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 1 year 6 months');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1.5 years''::interval, ''2019-11-02 12:22:23 UTC''::timestamptz);',
    $$VALUES
        ('2018-07-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 1.5 years');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 decade''::interval, ''2022-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2021-01-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 1 decade');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 century''::interval, ''2022-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2001-01-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 1 century');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''10 century''::interval, ''2022-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2001-01-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 10 century (1 millenium)');

SELECT diag('');
SELECT diag('RESET TIME ZONE');
SELECT diag('=================================');
RESET TIME ZONE;

SELECT diag('');
SELECT diag('Test tools.time_bucket(interval, timestamptz, interval, timestamptz)');
SELECT diag('=================================');

SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1m''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-01-02 12:22:00-00'::TIMESTAMPTZ)
    $$,'Verify Data from function tools.time_bucket - 1m');

SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''15m''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-01-02 12:15:00-00'::TIMESTAMPTZ)
    $$,'Verify Data from function tools.time_bucket - 15m');

SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1h''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-01-02 12:00:00-00'::TIMESTAMPTZ)
    $$,'Verify Data from function tools.time_bucket - 1h');

SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1d''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-01-02 00:00:00-00'::TIMESTAMPTZ)
    $$,'Verify Data from function tools.time_bucket - 1d');

-- Note: Every 30 days starting on 1/1/1970
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''30d''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2019-12-19T00:00:00Z'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 30d');

-- Note: Every 45 days starting on 1/1/1970
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''30d''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2019-12-19T00:00:00Z'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 45d');

-- Note: months starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 month''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-01-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 1 month');

-- Note: months starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''2 months''::interval, ''2020-02-02T12:22:23''::timestamptz);',
    $$VALUES
        ('2020-01-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 2 months');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''.25 year''::interval, ''2020-10-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-10-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - .25 year (Quarter)');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''.5 year''::interval, ''2020-10-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-07-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - .5 year (Half Year)');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 year''::interval, ''2020-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2020-01-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 1 year');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 year 6 months''::interval, ''2019-11-02 12:22:23 UTC''::timestamptz);',
    $$VALUES
        ('2018-07-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 1 year 6 months');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1.5 years''::interval, ''2019-11-02 12:22:23 UTC''::timestamptz);',
    $$VALUES
        ('2018-07-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 1.5 years');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 decade''::interval, ''2022-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2021-01-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 1 decade');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 century''::interval, ''2022-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2001-01-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 1 century');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''10 century''::interval, ''2022-01-02T12:22:23Z''::timestamptz);',
    $$VALUES
        ('2001-01-01 00:00:00-00'::timestamptz)
    $$,'Verify Data from function tools.time_bucket - 10 century (1 millenium)');

SELECT diag('');
SELECT diag('Test tools.time_bucket(interval, timestamp, interval, timestamp)');
SELECT diag('=================================');

SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1m''::interval, ''2020-01-02T12:22:23Z''::timestamp);',
    $$VALUES
        ('2020-01-02 12:22:00'::TIMESTAMP)
    $$,'Verify Data from function tools.time_bucket - 1m');

SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''15m''::interval, ''2020-01-02T12:22:23''::timestamp);',
    $$VALUES
        ('2020-01-02 12:15:00'::TIMESTAMP)
    $$,'Verify Data from function tools.time_bucket - 15m');

SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1h''::interval, ''2020-01-02T12:22:23''::timestamp);',
    $$VALUES
        ('2020-01-02 12:00:00'::TIMESTAMP)
    $$,'Verify Data from function tools.time_bucket - 1h');

SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1d''::interval, ''2020-01-02T12:22:23''::timestamp);',
    $$VALUES
        ('2020-01-02 00:00:00'::TIMESTAMP)
    $$,'Verify Data from function tools.time_bucket - 1d');

-- Note: Every 30 days starting on 1/1/1970
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''30d''::interval, ''2020-01-02T12:22:23''::timestamp);',
    $$VALUES
        ('2019-12-19 00:00:00'::timestamp)
    $$,'Verify Data from function tools.time_bucket - 30d');

-- Note: months starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 month''::interval, ''2020-01-02T12:22:23''::timestamp);',
    $$VALUES
        ('2020-01-01 00:00:00'::timestamp)
    $$,'Verify Data from function tools.time_bucket - 1 month');

-- Note: months starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''2 months''::interval, ''2020-02-02T12:22:23''::timestamp);',
    $$VALUES
        ('2020-01-01 00:00:00'::timestamp)
    $$,'Verify Data from function tools.time_bucket - 2 months');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''.25 year''::interval, ''2020-10-02T12:22:23''::timestamp);',
    $$VALUES
        ('2020-10-01 00:00:00'::timestamp)
    $$,'Verify Data from function tools.time_bucket - .25 year (Quarter)');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''.5 year''::interval, ''2020-10-02T12:22:23''::timestamp);',
    $$VALUES
        ('2020-07-01 00:00:00'::timestamp)
    $$,'Verify Data from function tools.time_bucket - .5 year (Half Year)');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 year''::interval, ''2020-01-02T12:22:23''::timestamp);',
    $$VALUES
        ('2020-01-01 00:00:00'::timestamp)
    $$,'Verify Data from function tools.time_bucket - 1 year');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 year 6 months''::interval, ''2019-11-02T12:22:23''::timestamp);',
    $$VALUES
        ('2018-07-01 00:00:00'::timestamp)
    $$,'Verify Data from function tools.time_bucket - 1 year 6 months');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1.5 years''::interval, ''2019-11-02 12:22:23''::timestamp);',
    $$VALUES
        ('2018-07-01 00:00:00'::timestamp)
    $$,'Verify Data from function tools.time_bucket - 1.5 years');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 decade''::interval, ''2022-01-02T12:22:23''::timestamp);',
    $$VALUES
        ('2021-01-01 00:00:00'::timestamp)
    $$,'Verify Data from function tools.time_bucket - 1 decade');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 century''::interval, ''2022-01-02T12:22:23''::timestamp);',
    $$VALUES
        ('2001-01-01 00:00:00'::timestamp)
    $$,'Verify Data from function tools.time_bucket - 1 century');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''10 century''::interval, ''2022-01-02T12:22:23''::timestamp);',
    $$VALUES
        ('2001-01-01 00:00:00'::timestamp)
    $$,'Verify Data from function tools.time_bucket - 10 century (1 millenium)');

SELECT diag('');
SELECT diag('Test tools.time_bucket(interval, date, interval, date)');
SELECT diag('=================================');

SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1d''::interval, ''2020-01-02''::date);',
    $$VALUES
        ('2020-01-02'::DATE)
    $$,'Verify Data from function tools.time_bucket - 1d');

-- Note: Every 30 days starting on 1/1/1970
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''30d''::interval, ''2020-01-02''::date);',
    $$VALUES
        ('2019-12-19'::DATE)
    $$,'Verify Data from function tools.time_bucket - 30d');

-- Note: months starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 month''::interval, ''2020-01-02''::date);',
    $$VALUES
        ('2020-01-01'::DATE)
    $$,'Verify Data from function tools.time_bucket - 1 month');

-- Note: months starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''2 months''::interval, ''2020-02-02''::date);',
    $$VALUES
        ('2020-01-01'::DATE)
    $$,'Verify Data from function tools.time_bucket - 2 months');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''.25 year''::interval, ''2020-10-02''::date);',
    $$VALUES
        ('2020-10-01'::date)
    $$,'Verify Data from function tools.time_bucket - .25 year (Quarter)');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''.5 year''::interval, ''2020-10-02''::date);',
    $$VALUES
        ('2020-07-01'::date)
    $$,'Verify Data from function tools.time_bucket - .5 year (Half Year)');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 year''::interval, ''2020-01-02''::date);',
    $$VALUES
        ('2020-01-01'::DATE)
    $$,'Verify Data from function tools.time_bucket - 1 year');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 year 6 months''::interval, ''2019-11-02''::date);',
    $$VALUES
        ('2018-07-01'::DATE)
    $$,'Verify Data from function tools.time_bucket - 1 year 6 months');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1.5 years''::interval, ''2019-11-02''::date);',
    $$VALUES
        ('2018-07-01'::date)
    $$,'Verify Data from function tools.time_bucket - 1.5 years');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 decade''::interval, ''2022-01-02''::date);',
    $$VALUES
        ('2021-01-01'::DATE)
    $$,'Verify Data from function tools.time_bucket - 1 decade');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''1 century''::interval, ''2022-01-02''::date);',
    $$VALUES
        ('2001-01-01'::DATE)
    $$,'Verify Data from function tools.time_bucket - 1 century');

-- Note: years starting on 1/1/0001
SELECT results_eq(
    E'SELECT * FROM tools.time_bucket(''10 century''::interval, ''2022-01-02''::date);',
    $$VALUES
        ('2001-01-01'::DATE)
    $$,'Verify Data from function tools.time_bucket - 10 century (1 millenium)');

SELECT diag('');
SELECT diag('Test Continuous Aggregates');
SELECT diag('=================================');

SELECT results_eq(
    E'SELECT * FROM logs.connection_received_logs_1s ORDER BY log_time, cluster_name, connection_from;',
    $$VALUES
        ('2019-09-18 20:00:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2019-09-18 20:16:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2019-09-18 20:18:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2019-09-18 20:19:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2019-09-18 20:56:01-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,1::bigint),
        ('2020-01-17 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2020-01-17 19:56:01-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,1::bigint),
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2020-01-18 19:16:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2020-01-18 19:18:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2020-01-18 19:19:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2020-01-18 19:56:01-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_received_logs_1s');

SELECT results_eq(
    E'SELECT * FROM logs.connection_received_logs_1m ORDER BY log_time, cluster_name, connection_from;',
    $$VALUES
        ('2019-09-18 20:00:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2019-09-18 20:16:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2019-09-18 20:18:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2019-09-18 20:19:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2019-09-18 20:56:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,1::bigint),
        ('2020-01-17 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2020-01-17 19:56:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,1::bigint),
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2020-01-18 19:16:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2020-01-18 19:18:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2020-01-18 19:19:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2020-01-18 19:56:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_received_logs_1m');

SELECT results_eq(
    E'SELECT * FROM logs.connection_received_logs_1h ORDER BY log_time, cluster_name, connection_from;',
    $$VALUES
        ('2019-09-18 20:00:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,4::bigint),
        ('2019-09-18 20:00:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,1::bigint),
        ('2020-01-17 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2020-01-17 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,1::bigint),
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,4::bigint),
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_received_logs_1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_received_logs_1d ORDER BY log_time, cluster_name, connection_from;',
    $$VALUES
        ('2019-09-19 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,4::bigint),
        ('2019-09-19 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,1::bigint),
        ('2020-01-18 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2020-01-18 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,1::bigint),
        ('2020-01-19 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,4::bigint),
        ('2020-01-19 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_received_logs_1d');

SELECT results_eq(
    E'SELECT * FROM logs.connection_received_logs_1w ORDER BY log_time, cluster_name, connection_from;',
    $$VALUES
        ('2019-09-16 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,4::bigint),
        ('2019-09-16 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,1::bigint),
        ('2020-01-13 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,4::bigint),
        ('2020-01-13 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,1::bigint),
        ('2020-01-13 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::bigint),
        ('2020-01-13 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_received_logs_1w');

SELECT results_eq(
    E'SELECT * FROM logs.connection_received_logs_1mon ORDER BY log_time, cluster_name, connection_from;',
    $$VALUES
        ('2019-09-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,4::numeric),
        ('2019-09-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,4::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,1::numeric)
    $$,'Verify Data from continuous aggregate logs.connection_received_logs_1mon');

SELECT results_eq(
    E'SELECT * FROM logs.connection_received_logs_1y ORDER BY log_time, cluster_name, connection_from;',
    $$VALUES
        ('2019-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,4::numeric),
        ('2019-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,4::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,1::numeric)
    $$,'Verify Data from continuous aggregate logs.connection_received_logs_1y');

SELECT results_eq(
    E'SELECT * FROM logs.connection_authorized_logs_1s ORDER BY log_time, cluster_name, connection_from, database_name, user_name;',
    $$VALUES
        ('2019-09-18 20:00:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2019-09-18 20:16:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2019-09-18 20:18:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2019-09-18 20:19:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2019-09-18 20:56:01-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint),
        ('2020-01-17 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database2'::text,'user1'::text,1::bigint),
        ('2020-01-17 19:56:01-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint),
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2020-01-18 19:16:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2020-01-18 19:18:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2020-01-18 19:19:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2020-01-18 19:56:01-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_authorized_logs_1s');

SELECT results_eq(
    E'SELECT * FROM logs.connection_authorized_logs_1m ORDER BY log_time, cluster_name, connection_from, database_name, user_name;',
    $$VALUES
        ('2019-09-18 20:00:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2019-09-18 20:16:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2019-09-18 20:18:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2019-09-18 20:19:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2019-09-18 20:56:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint),
        ('2020-01-17 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database2'::text,'user1'::text,1::bigint),
        ('2020-01-17 19:56:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint),
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2020-01-18 19:16:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2020-01-18 19:18:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2020-01-18 19:19:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,1::bigint),
        ('2020-01-18 19:56:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_authorized_logs_1m');

SELECT results_eq(
    E'SELECT * FROM logs.connection_authorized_logs_1h ORDER BY log_time, cluster_name, connection_from, database_name, user_name;',
    $$VALUES
        ('2019-09-18 20:00:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,4::bigint),
        ('2019-09-18 20:00:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint),
        ('2020-01-17 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database2'::text,'user1'::text,1::bigint),
        ('2020-01-17 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint),
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,4::bigint),
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_authorized_logs_1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_authorized_logs_1d ORDER BY log_time, cluster_name, connection_from, database_name, user_name;',
    $$VALUES
        ('2019-09-19 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,4::bigint),
        ('2019-09-19 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint),
        ('2020-01-18 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database2'::text,'user1'::text,1::bigint),
        ('2020-01-18 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint),
        ('2020-01-19 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,4::bigint),
        ('2020-01-19 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_authorized_logs_1d');

SELECT results_eq(
    E'SELECT * FROM logs.connection_authorized_logs_1w ORDER BY log_time, cluster_name, connection_from, database_name, user_name;',
    $$VALUES
        ('2019-09-16 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,4::bigint),
        ('2019-09-16 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint),
        ('2020-01-13 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,4::bigint),
        ('2020-01-13 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint),
        ('2020-01-13 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database2'::text,'user1'::text,1::bigint),
        ('2020-01-13 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_authorized_logs_1w');

SELECT results_eq(
    E'SELECT * FROM logs.connection_authorized_logs_1mon ORDER BY log_time, cluster_name, connection_from, database_name, user_name;',
    $$VALUES
        ('2019-09-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,4::numeric),
        ('2019-09-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,4::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database2'::text,'user1'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::numeric)
    $$,'Verify Data from continuous aggregate logs.connection_authorized_logs_1mon');

SELECT results_eq(
    E'SELECT * FROM logs.connection_authorized_logs_1y ORDER BY log_time, cluster_name, connection_from, database_name, user_name;',
    $$VALUES
        ('2019-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,4::numeric),
        ('2019-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,4::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database2'::text,'user1'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,1::numeric)
    $$,'Verify Data from continuous aggregate logs.connection_authorized_logs_1y');

SELECT results_eq(
    E'SELECT * FROM logs.connection_disconnection_logs_1s ORDER BY log_time, cluster_name, connection_from, database_name, user_name, application_name;',
    $$VALUES
        ('2019-09-18 20:00:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2019-09-18 20:16:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2019-09-18 20:18:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2019-09-18 20:19:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2019-09-18 20:56:01-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint),
        ('2020-01-17 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database2'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2020-01-17 19:56:01-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint),
        ('2020-01-18 19:00:01-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2020-01-18 19:16:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2020-01-18 19:18:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2020-01-18 19:19:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2020-01-18 19:56:01-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_disconnection_logs_1s');

SELECT results_eq(
    E'SELECT * FROM logs.connection_disconnection_logs_1m ORDER BY log_time, cluster_name, connection_from, database_name, user_name, application_name;',
    $$VALUES
        ('2019-09-18 20:00:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2019-09-18 20:16:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2019-09-18 20:18:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2019-09-18 20:19:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2019-09-18 20:56:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint),
        ('2020-01-17 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database2'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2020-01-17 19:56:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint),
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2020-01-18 19:16:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2020-01-18 19:18:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2020-01-18 19:19:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2020-01-18 19:56:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_disconnection_logs_1m');

SELECT results_eq(
    E'SELECT * FROM logs.connection_disconnection_logs_1h ORDER BY log_time, cluster_name, connection_from, database_name, user_name, application_name;',
    $$VALUES
        ('2019-09-18 20:00:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,4::bigint),
        ('2019-09-18 20:00:00-07'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint),
        ('2020-01-17 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database2'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2020-01-17 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint),
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,4::bigint),
        ('2020-01-18 19:00:00-08'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_disconnection_logs_1h');

SELECT results_eq(
    E'SELECT * FROM logs.connection_disconnection_logs_1d ORDER BY log_time, cluster_name, connection_from, database_name, user_name, application_name;',
    $$VALUES
        ('2019-09-19 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,4::bigint),
        ('2019-09-19 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint),
        ('2020-01-18 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database2'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2020-01-18 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint),
        ('2020-01-19 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,4::bigint),
        ('2020-01-19 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_disconnection_logs_1d');

SELECT results_eq(
    E'SELECT * FROM logs.connection_disconnection_logs_1w ORDER BY log_time, cluster_name, connection_from, database_name, user_name, application_name;',
    $$VALUES
        ('2019-09-16 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,4::bigint),
        ('2019-09-16 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint),
        ('2020-01-13 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,4::bigint),
        ('2020-01-13 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint),
        ('2020-01-13 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database2'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::bigint),
        ('2020-01-13 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::bigint)
    $$,'Verify Data from continuous aggregate logs.connection_disconnection_logs_1w');

SELECT results_eq(
    E'SELECT * FROM logs.connection_disconnection_logs_1mon ORDER BY log_time, cluster_name, connection_from, database_name, user_name, application_name;',
    $$VALUES
        ('2019-09-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,4::numeric),
        ('2019-09-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,4::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database2'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::numeric)
    $$,'Verify Data from continuous aggregate logs.connection_disconnection_logs_1mon');

SELECT results_eq(
    E'SELECT * FROM logs.connection_disconnection_logs_1y ORDER BY log_time, cluster_name, connection_from, database_name, user_name, application_name;',
    $$VALUES
        ('2019-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,4::numeric),
        ('2019-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc1.yourdomain.com'::text,'database1'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,4::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db1'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc1.yourdomain.com'::text,'database2'::text,'user1'::text,'PostgreSQL JDBC Driver'::text,1::numeric),
        ('2020-01-01 00:00:00-00'::TIMESTAMP WITH TIME ZONE,'db2'::text,'pc2.yourdomain.com'::text,'postgres'::text,'user2'::text,'psql'::text,1::numeric)
    $$,'Verify Data from continuous aggregate logs.connection_disconnection_logs_1y');


SELECT diag('');
SELECT diag('Test tools.field_list_check(TEXT[], BOOLEAN, BOOLEAN)');
SELECT diag('=================================');

SELECT results_eq(
    E'SELECT tools.field_list_check(NULL);',
    $$VALUES ('')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - NULL');

SELECT results_eq(
    E'SELECT tools.field_list_check(ARRAY[ARRAY[''test'', $$$$]]);',
    $$VALUES ('')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - Empty String $$');

SELECT results_eq(
    E'SELECT tools.field_list_check(ARRAY[ARRAY[''test'', NULL]]);',
    $$VALUES ('')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - NULL for String');

SELECT results_eq(
    E'SELECT tools.field_list_check(ARRAY[ARRAY[''test'', $$''test''$$]]);',
    $$VALUES (E'test IN (''test'')')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - Single Test String');

SELECT results_eq(
    E'SELECT tools.field_list_check(ARRAY[ARRAY[''test'', $$''testing'', ''test''$$]]);',
    $$VALUES (E'test IN (''testing'', ''test'')')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - Double Test String');

SELECT results_eq(
    E'SELECT tools.field_list_check(ARRAY[ARRAY[''test'', $$''testing''$$]]);',
    $$VALUES (E'test IN (''testing'')')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - Single Test String 2');

SELECT results_eq(
    E'SELECT tools.field_list_check(ARRAY[ARRAY[''test'', $$''All''$$]]);',
    $$VALUES ('')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - All String');

SELECT results_eq(
    E'SELECT tools.field_list_check(ARRAY[ARRAY[''test'', $$''NULL''$$]]);',
    $$VALUES ('')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - NULL Quoted String $$');

SELECT results_eq(
    E'SELECT tools.field_list_check(ARRAY[ARRAY[''test'', $$NULL$$]]);',
    $$VALUES ('')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - NULL String $$');

SELECT results_eq(
    E'SELECT tools.field_list_check(ARRAY[ARRAY[''test'', $$''All''$$]], TRUE);',
    $$VALUES ('')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - All String - TRUE');

SELECT results_eq(
    E'SELECT tools.field_list_check(ARRAY[ARRAY[''test'', $$''testing'', ''test''$$], ARRAY[''testing'', $$''testing2'', ''test2''$$]]);',
    $$VALUES (E'test IN (''testing'', ''test'') AND testing IN (''testing2'', ''test2'')')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - Two Arrays');

SELECT results_eq(
    E'SELECT tools.field_list_check(ARRAY[ARRAY[''test'', $$''testing'', ''test''$$], ARRAY[''testing'', $$''testing2'', ''test2''$$], ARRAY[''tester'', $$''NULL''$$]]);',
    $$VALUES (E'test IN (''testing'', ''test'') AND testing IN (''testing2'', ''test2'')')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - Three Arrays, one being NULL String');

SELECT results_eq(
    E'SELECT tools.field_list_check(ARRAY[ARRAY[''test'', $$''testing'', ''test''$$], ARRAY[''testing'', $$''testing2'', ''test2''$$], ARRAY[''tester'', $$''NULL''$$]], TRUE);',
    $$VALUES (E'test IN (''testing'', ''test'') AND testing IN (''testing2'', ''test2'') AND')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - Three Arrays, one being NULL String - TRUE');

SELECT results_eq(
    E'SELECT tools.field_list_check(ARRAY[ARRAY[''test'', $$''testing'', ''test''$$], ARRAY[''testing'', $$''testing2'', ''test2''$$], ARRAY[NULL, NULL]], TRUE);',
    $$VALUES (E'test IN (''testing'', ''test'') AND testing IN (''testing2'', ''test2'') AND')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - Three Arrays, one being NULL, NULL - TRUE');

SELECT results_eq(
    E'SELECT tools.field_list_check(ARRAY[ARRAY[''test'', $$''testing'', ''test''$$], ARRAY[''testing'', $$''testing2'', ''test2''$$], ARRAY[NULL, NULL]], TRUE, TRUE);',
    $$VALUES (E'WHERE test IN (''testing'', ''test'') AND testing IN (''testing2'', ''test2'') AND')
    $$,'Verify tools.field_list_check(TEXT[], BOOLEAN) - Three Arrays, one being NULL, NULL - TRUE - TRUE');
